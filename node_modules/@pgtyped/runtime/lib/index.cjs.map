{
  "version": 3,
  "sources": ["../src/index.ts", "../src/preprocessor.ts", "../../parser/src/loader/typescript/query.ts", "../../parser/src/loader/typescript/parser/QueryLexer.ts", "../../parser/src/loader/typescript/parser/QueryParser.ts", "../../parser/src/loader/sql/logger.ts", "../../parser/src/loader/sql/index.ts", "../../parser/src/loader/sql/parser/SQLLexer.ts", "../../parser/src/loader/sql/parser/SQLParser.ts", "../src/preprocessor-ts.ts", "../src/preprocessor-sql.ts", "../src/tag.ts"],
  "sourcesContent": ["export {\n  ParameterTransform,\n  QueryParameters,\n  InterpolatedQuery,\n  QueryParameter,\n} from './preprocessor.js';\n\nexport { processTSQueryAST } from './preprocessor-ts.js';\nexport { processSQLQueryIR } from './preprocessor-sql.js';\n\nexport { sql, TaggedQuery, PreparedQuery } from './tag.js';\n", "export type Scalar = string | number | null;\n\nexport enum ParameterTransform {\n  Scalar,\n  Spread,\n  Pick,\n  PickSpread,\n}\n\nexport interface ScalarParameter {\n  name: string;\n  type: ParameterTransform.Scalar;\n  required: boolean;\n  assignedIndex: number;\n}\n\nexport interface DictParameter {\n  name: string;\n  type: ParameterTransform.Pick;\n  dict: {\n    [key: string]: ScalarParameter;\n  };\n}\n\nexport interface ScalarArrayParameter {\n  name: string;\n  type: ParameterTransform.Spread;\n  required: boolean;\n  assignedIndex: number | number[];\n}\n\nexport interface DictArrayParameter {\n  name: string;\n  type: ParameterTransform.PickSpread;\n  dict: {\n    [key: string]: ScalarParameter;\n  };\n}\nexport type QueryParameter =\n  | ScalarParameter\n  | ScalarArrayParameter\n  | DictParameter\n  | DictArrayParameter;\n\nexport interface InterpolatedQuery {\n  query: string;\n  mapping: QueryParameter[];\n  bindings: Scalar[];\n}\n\nexport interface NestedParameters {\n  [subParamName: string]: Scalar;\n}\n\nexport interface QueryParameters {\n  [paramName: string]:\n    | Scalar\n    | NestedParameters\n    | Scalar[]\n    | NestedParameters[];\n}\n\nexport function replaceIntervals(\n  str: string,\n  intervals: { a: number; b: number; sub: string }[],\n) {\n  if (intervals.length === 0) {\n    return str;\n  }\n  intervals.sort((x, y) => x.a - y.a);\n  let offset = 0;\n  let result = '';\n  for (const interval of intervals) {\n    const a = str.slice(0, interval.a + offset);\n    const c = str.slice(interval.b + offset + 1, str.length);\n    result = a + interval.sub + c;\n    offset += result.length - str.length;\n    str = result;\n  }\n  return result;\n}\n", "import { QueryParserListener } from './parser/QueryParserListener.js';\nimport { CharStreams, CommonTokenStream } from 'antlr4ts';\nimport { ParseTreeWalker } from 'antlr4ts/tree/ParseTreeWalker.js';\nimport { QueryLexer } from './parser/QueryLexer.js';\nimport {\n  ParamContext,\n  ParamNameContext,\n  PickKeyContext,\n  QueryContext,\n  QueryParser,\n  ScalarParamNameContext,\n} from './parser/QueryParser.js';\nimport { Logger, ParseEvent } from '../sql/logger.js';\nimport { Interval } from 'antlr4ts/misc/index.js';\n\nexport enum ParamType {\n  Scalar = 'scalar',\n  Object = 'object',\n  ScalarArray = 'scalar_array',\n  ObjectArray = 'object_array',\n}\n\nexport interface ParamKey {\n  name: string;\n  required: boolean;\n}\n\nexport type ParamSelection =\n  | {\n      type: ParamType.Scalar;\n    }\n  | {\n      type: ParamType.ScalarArray;\n    }\n  | {\n      type: ParamType.Object | ParamType.ObjectArray;\n      keys: ParamKey[];\n    };\n\nexport interface Param {\n  name: string;\n  selection: ParamSelection;\n  required: boolean;\n  location: CodeInterval;\n}\n\ninterface CodeInterval {\n  a: number;\n  b: number;\n  line: number;\n  col: number;\n}\n\nexport interface Query {\n  name: string;\n  params: Param[];\n  text: string;\n}\n\nexport function assert(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error('Assertion Failed');\n  }\n}\n\nclass ParseListener implements QueryParserListener {\n  logger: Logger;\n  query: Partial<Query> = {};\n  private currentParam: Partial<Param> = {};\n  private currentSelection: Partial<ParamSelection> = {};\n\n  constructor(queryName: string, logger: Logger) {\n    this.query.name = queryName;\n    this.logger = logger;\n  }\n\n  enterQuery(ctx: QueryContext) {\n    const { inputStream } = ctx.start;\n    const end = ctx.stop!.stopIndex;\n\n    const interval = new Interval(0, end);\n    const text = inputStream!.getText(interval);\n    this.query = {\n      name: this.query.name,\n      text,\n      params: [],\n    };\n  }\n\n  enterParamName(ctx: ParamNameContext) {\n    this.currentParam = {\n      name: ctx.text,\n      selection: undefined,\n    };\n  }\n\n  enterScalarParamName(ctx: ScalarParamNameContext) {\n    const required = !!ctx.REQUIRED_MARK();\n    const name = ctx.ID().text;\n\n    this.currentParam = {\n      name,\n      required,\n    };\n  }\n\n  exitParam(ctx: ParamContext) {\n    const defLoc = {\n      a: ctx.start.startIndex,\n      b: ctx.stop!.stopIndex,\n      line: ctx.start.line,\n      col: ctx.start.charPositionInLine,\n    };\n    this.currentParam.location = defLoc;\n    this.currentParam.selection = this.currentSelection as ParamSelection;\n    this.query.params!.push(this.currentParam as Param);\n    this.currentSelection = {};\n    this.currentParam = {};\n  }\n\n  enterScalarParam() {\n    this.currentSelection = {\n      type: ParamType.Scalar,\n    };\n  }\n\n  enterPickParam() {\n    this.currentSelection = {\n      type: ParamType.Object,\n      keys: [],\n    };\n  }\n\n  enterArrayPickParam() {\n    this.currentSelection = {\n      type: ParamType.ObjectArray,\n      keys: [],\n    };\n  }\n\n  enterArrayParam() {\n    this.currentSelection = {\n      type: ParamType.ScalarArray,\n    };\n  }\n\n  enterPickKey(ctx: PickKeyContext) {\n    assert('keys' in this.currentSelection);\n\n    const required = !!ctx.REQUIRED_MARK();\n    const name = ctx.ID().text;\n\n    this.currentSelection.keys!.push({ name, required });\n  }\n}\n\nfunction parseText(\n  text: string,\n  queryName: string = 'query',\n): { query: Query; events: ParseEvent[] } {\n  const logger = new Logger();\n  const inputStream = CharStreams.fromString(text);\n  const lexer = new QueryLexer(inputStream);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(logger);\n  const tokenStream = new CommonTokenStream(lexer);\n  const parser = new QueryParser(tokenStream);\n  parser.removeErrorListeners();\n  parser.addErrorListener(logger);\n\n  const tree = parser.input();\n\n  const listener = new ParseListener(queryName, logger);\n  ParseTreeWalker.DEFAULT.walk(listener as QueryParserListener, tree);\n\n  return {\n    query: listener.query as any,\n    events: logger.parseEvents,\n  };\n}\n\nexport default parseText;\n", "// Generated from src/loader/typescript/grammar/QueryLexer.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ATN } from \"antlr4ts/atn/ATN.js\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer.js\";\nimport { CharStream } from \"antlr4ts/CharStream.js\";\nimport { Lexer } from \"antlr4ts/Lexer.js\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator.js\";\nimport { NotNull } from \"antlr4ts/Decorators.js\";\nimport { Override } from \"antlr4ts/Decorators.js\";\nimport { RuleContext } from \"antlr4ts/RuleContext.js\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary.js\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl.js\";\n\nimport * as Utils from \"antlr4ts/misc/Utils.js\";\n\n\nexport class QueryLexer extends Lexer {\n\tpublic static readonly ID = 1;\n\tpublic static readonly SINGULAR_PARAM_MARK = 2;\n\tpublic static readonly PLURAL_PARAM_MARK = 3;\n\tpublic static readonly COMMA = 4;\n\tpublic static readonly OB = 5;\n\tpublic static readonly CB = 6;\n\tpublic static readonly WORD = 7;\n\tpublic static readonly REQUIRED_MARK = 8;\n\tpublic static readonly SPECIAL = 9;\n\tpublic static readonly EOF_STATEMENT = 10;\n\tpublic static readonly WSL = 11;\n\tpublic static readonly STRING = 12;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"QUOT\", \"ID\", \"SID\", \"SINGULAR_PARAM_MARK\", \"PLURAL_PARAM_MARK\", \"COMMA\", \n\t\t\"OB\", \"CB\", \"WORD\", \"REQUIRED_MARK\", \"SPECIAL\", \"EOF_STATEMENT\", \"WSL\", \n\t\t\"STRING\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, \"'$'\", \"'$$'\", \"','\", \"'('\", \"')'\", undefined, \"'!'\", \n\t\tundefined, \"';'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ID\", \"SINGULAR_PARAM_MARK\", \"PLURAL_PARAM_MARK\", \"COMMA\", \n\t\t\"OB\", \"CB\", \"WORD\", \"REQUIRED_MARK\", \"SPECIAL\", \"EOF_STATEMENT\", \"WSL\", \n\t\t\"STRING\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QueryLexer._LITERAL_NAMES, QueryLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn QueryLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(QueryLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"QueryLexer.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return QueryLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return QueryLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return QueryLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return QueryLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x0EX\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x07\\x03$\" +\n\t\t\"\\n\\x03\\f\\x03\\x0E\\x03\\'\\v\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\" +\n\t\t\"\\n\\x06\\n9\\n\\n\\r\\n\\x0E\\n:\\x03\\v\\x03\\v\\x03\\f\\x06\\f@\\n\\f\\r\\f\\x0E\\fA\\x03\\r\" +\n\t\t\"\\x03\\r\\x03\\x0E\\x06\\x0EG\\n\\x0E\\r\\x0E\\x0E\\x0EH\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\" +\n\t\t\"\\x0F\\x03\\x0F\\x07\\x0FP\\n\\x0F\\f\\x0F\\x0E\\x0FS\\v\\x0F\\x03\\x0F\\x03\\x0F\\x05\\x0F\" +\n\t\t\"W\\n\\x0F\\x03Q\\x02\\x02\\x10\\x03\\x02\\x02\\x05\\x02\\x03\\x07\\x02\\x02\\t\\x02\\x04\" +\n\t\t\"\\v\\x02\\x05\\r\\x02\\x06\\x0F\\x02\\x07\\x11\\x02\\b\\x13\\x02\\t\\x15\\x02\\n\\x17\\x02\" +\n\t\t\"\\v\\x19\\x02\\f\\x1B\\x02\\r\\x1D\\x02\\x0E\\x03\\x02\\x07\\x05\\x02C\\\\aac|\\x06\\x02\" +\n\t\t\"2;C\\\\aac|\\f\\x02$%\\'(,-/1<<>B]]_`bb}\\x80\\x05\\x02\\v\\f\\x0F\\x0F\\\"\\\"\\x03\\x02\" +\n\t\t\"^^\\x02[\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x03\\x1F\\x03\\x02\\x02\\x02\\x05!\\x03\\x02\\x02\\x02\\x07(\\x03\\x02\\x02\\x02\" +\n\t\t\"\\t,\\x03\\x02\\x02\\x02\\v.\\x03\\x02\\x02\\x02\\r1\\x03\\x02\\x02\\x02\\x0F3\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x115\\x03\\x02\\x02\\x02\\x138\\x03\\x02\\x02\\x02\\x15<\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x17?\\x03\\x02\\x02\\x02\\x19C\\x03\\x02\\x02\\x02\\x1BF\\x03\\x02\\x02\\x02\\x1DL\\x03\" +\n\t\t\"\\x02\\x02\\x02\\x1F \\x07)\\x02\\x02 \\x04\\x03\\x02\\x02\\x02!%\\t\\x02\\x02\\x02\\\"\" +\n\t\t\"$\\t\\x03\\x02\\x02#\\\"\\x03\\x02\\x02\\x02$\\'\\x03\\x02\\x02\\x02%#\\x03\\x02\\x02\\x02\" +\n\t\t\"%&\\x03\\x02\\x02\\x02&\\x06\\x03\\x02\\x02\\x02\\'%\\x03\\x02\\x02\\x02()\\x05\\x05\\x03\" +\n\t\t\"\\x02)*\\x03\\x02\\x02\\x02*+\\b\\x04\\x02\\x02+\\b\\x03\\x02\\x02\\x02,-\\x07&\\x02\\x02\" +\n\t\t\"-\\n\\x03\\x02\\x02\\x02./\\x07&\\x02\\x02/0\\x07&\\x02\\x020\\f\\x03\\x02\\x02\\x021\" +\n\t\t\"2\\x07.\\x02\\x022\\x0E\\x03\\x02\\x02\\x0234\\x07*\\x02\\x024\\x10\\x03\\x02\\x02\\x02\" +\n\t\t\"56\\x07+\\x02\\x026\\x12\\x03\\x02\\x02\\x0279\\t\\x03\\x02\\x0287\\x03\\x02\\x02\\x02\" +\n\t\t\"9:\\x03\\x02\\x02\\x02:8\\x03\\x02\\x02\\x02:;\\x03\\x02\\x02\\x02;\\x14\\x03\\x02\\x02\" +\n\t\t\"\\x02<=\\x07#\\x02\\x02=\\x16\\x03\\x02\\x02\\x02>@\\t\\x04\\x02\\x02?>\\x03\\x02\\x02\" +\n\t\t\"\\x02@A\\x03\\x02\\x02\\x02A?\\x03\\x02\\x02\\x02AB\\x03\\x02\\x02\\x02B\\x18\\x03\\x02\" +\n\t\t\"\\x02\\x02CD\\x07=\\x02\\x02D\\x1A\\x03\\x02\\x02\\x02EG\\t\\x05\\x02\\x02FE\\x03\\x02\" +\n\t\t\"\\x02\\x02GH\\x03\\x02\\x02\\x02HF\\x03\\x02\\x02\\x02HI\\x03\\x02\\x02\\x02IJ\\x03\\x02\" +\n\t\t\"\\x02\\x02JK\\b\\x0E\\x03\\x02K\\x1C\\x03\\x02\\x02\\x02LV\\x05\\x03\\x02\\x02MW\\x05\" +\n\t\t\"\\x03\\x02\\x02NP\\v\\x02\\x02\\x02ON\\x03\\x02\\x02\\x02PS\\x03\\x02\\x02\\x02QR\\x03\" +\n\t\t\"\\x02\\x02\\x02QO\\x03\\x02\\x02\\x02RT\\x03\\x02\\x02\\x02SQ\\x03\\x02\\x02\\x02TU\\n\" +\n\t\t\"\\x06\\x02\\x02UW\\x05\\x03\\x02\\x02VM\\x03\\x02\\x02\\x02VQ\\x03\\x02\\x02\\x02W\\x1E\" +\n\t\t\"\\x03\\x02\\x02\\x02\\t\\x02%:AHQV\\x04\\t\\x03\\x02\\b\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!QueryLexer.__ATN) {\n\t\t\tQueryLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QueryLexer._serializedATN));\n\t\t}\n\n\t\treturn QueryLexer.__ATN;\n\t}\n\n}\n\n", "// Generated from src/loader/typescript/grammar/QueryParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ATN } from \"antlr4ts/atn/ATN.js\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer.js\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException.js\";\nimport { NotNull } from \"antlr4ts/Decorators.js\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException.js\";\nimport { Override } from \"antlr4ts/Decorators.js\";\nimport { Parser } from \"antlr4ts/Parser.js\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext.js\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator.js\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener.js\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor.js\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException.js\";\nimport { RuleContext } from \"antlr4ts/RuleContext.js\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode.js\";\nimport { Token } from \"antlr4ts/Token.js\";\nimport { TokenStream } from \"antlr4ts/TokenStream.js\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary.js\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl.js\";\n\nimport * as Utils from \"antlr4ts/misc/Utils.js\";\n\nimport { QueryParserListener } from \"./QueryParserListener.js\";\nimport { QueryParserVisitor } from \"./QueryParserVisitor.js\";\n\n\nexport class QueryParser extends Parser {\n\tpublic static readonly ID = 1;\n\tpublic static readonly SINGULAR_PARAM_MARK = 2;\n\tpublic static readonly PLURAL_PARAM_MARK = 3;\n\tpublic static readonly COMMA = 4;\n\tpublic static readonly OB = 5;\n\tpublic static readonly CB = 6;\n\tpublic static readonly WORD = 7;\n\tpublic static readonly REQUIRED_MARK = 8;\n\tpublic static readonly SPECIAL = 9;\n\tpublic static readonly EOF_STATEMENT = 10;\n\tpublic static readonly WSL = 11;\n\tpublic static readonly STRING = 12;\n\tpublic static readonly RULE_input = 0;\n\tpublic static readonly RULE_query = 1;\n\tpublic static readonly RULE_param = 2;\n\tpublic static readonly RULE_ignored = 3;\n\tpublic static readonly RULE_scalarParam = 4;\n\tpublic static readonly RULE_pickParam = 5;\n\tpublic static readonly RULE_arrayPickParam = 6;\n\tpublic static readonly RULE_arrayParam = 7;\n\tpublic static readonly RULE_scalarParamName = 8;\n\tpublic static readonly RULE_paramName = 9;\n\tpublic static readonly RULE_pickKey = 10;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"input\", \"query\", \"param\", \"ignored\", \"scalarParam\", \"pickParam\", \"arrayPickParam\", \n\t\t\"arrayParam\", \"scalarParamName\", \"paramName\", \"pickKey\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, \"'$'\", \"'$$'\", \"','\", \"'('\", \"')'\", undefined, \"'!'\", \n\t\tundefined, \"';'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ID\", \"SINGULAR_PARAM_MARK\", \"PLURAL_PARAM_MARK\", \"COMMA\", \n\t\t\"OB\", \"CB\", \"WORD\", \"REQUIRED_MARK\", \"SPECIAL\", \"EOF_STATEMENT\", \"WSL\", \n\t\t\"STRING\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QueryParser._LITERAL_NAMES, QueryParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn QueryParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"QueryParser.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return QueryParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return QueryParser._serializedATN; }\n\n\tprotected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {\n\t\treturn new FailedPredicateException(this, predicate, message);\n\t}\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(QueryParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic input(): InputContext {\n\t\tlet _localctx: InputContext = new InputContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, QueryParser.RULE_input);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 22;\n\t\t\tthis.query();\n\t\t\tthis.state = 24;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === QueryParser.EOF_STATEMENT) {\n\t\t\t\t{\n\t\t\t\tthis.state = 23;\n\t\t\t\tthis.match(QueryParser.EOF_STATEMENT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state = 26;\n\t\t\tthis.match(QueryParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic query(): QueryContext {\n\t\tlet _localctx: QueryContext = new QueryContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, QueryParser.RULE_query);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 29;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tdo {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tthis.state = 28;\n\t\t\t\tthis.ignored();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 31;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << QueryParser.ID) | (1 << QueryParser.COMMA) | (1 << QueryParser.OB) | (1 << QueryParser.CB) | (1 << QueryParser.WORD) | (1 << QueryParser.REQUIRED_MARK) | (1 << QueryParser.SPECIAL) | (1 << QueryParser.STRING))) !== 0));\n\t\t\tthis.state = 42;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\twhile (_la === QueryParser.SINGULAR_PARAM_MARK || _la === QueryParser.PLURAL_PARAM_MARK) {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tthis.state = 33;\n\t\t\t\tthis.param();\n\t\t\t\tthis.state = 37;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t\twhile ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << QueryParser.ID) | (1 << QueryParser.COMMA) | (1 << QueryParser.OB) | (1 << QueryParser.CB) | (1 << QueryParser.WORD) | (1 << QueryParser.REQUIRED_MARK) | (1 << QueryParser.SPECIAL) | (1 << QueryParser.STRING))) !== 0)) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 34;\n\t\t\t\t\tthis.ignored();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.state = 39;\n\t\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t\t_la = this._input.LA(1);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 44;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic param(): ParamContext {\n\t\tlet _localctx: ParamContext = new ParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, QueryParser.RULE_param);\n\t\ttry {\n\t\t\tthis.state = 49;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 45;\n\t\t\t\tthis.pickParam();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 46;\n\t\t\t\tthis.arrayPickParam();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 47;\n\t\t\t\tthis.scalarParam();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tthis.enterOuterAlt(_localctx, 4);\n\t\t\t\t{\n\t\t\t\tthis.state = 48;\n\t\t\t\tthis.arrayParam();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic ignored(): IgnoredContext {\n\t\tlet _localctx: IgnoredContext = new IgnoredContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, QueryParser.RULE_ignored);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tlet _alt: number;\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 52;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_alt = 1;\n\t\t\tdo {\n\t\t\t\tswitch (_alt) {\n\t\t\t\tcase 1:\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 51;\n\t\t\t\t\t_la = this._input.LA(1);\n\t\t\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << QueryParser.ID) | (1 << QueryParser.COMMA) | (1 << QueryParser.OB) | (1 << QueryParser.CB) | (1 << QueryParser.WORD) | (1 << QueryParser.REQUIRED_MARK) | (1 << QueryParser.SPECIAL) | (1 << QueryParser.STRING))) !== 0))) {\n\t\t\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\t\t\tthis.consume();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t\t}\n\t\t\t\tthis.state = 54;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);\n\t\t\t} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic scalarParam(): ScalarParamContext {\n\t\tlet _localctx: ScalarParamContext = new ScalarParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 8, QueryParser.RULE_scalarParam);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 56;\n\t\t\tthis.match(QueryParser.SINGULAR_PARAM_MARK);\n\t\t\tthis.state = 57;\n\t\t\tthis.scalarParamName();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic pickParam(): PickParamContext {\n\t\tlet _localctx: PickParamContext = new PickParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 10, QueryParser.RULE_pickParam);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tlet _alt: number;\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 59;\n\t\t\tthis.match(QueryParser.SINGULAR_PARAM_MARK);\n\t\t\tthis.state = 60;\n\t\t\tthis.paramName();\n\t\t\tthis.state = 61;\n\t\t\tthis.match(QueryParser.OB);\n\t\t\tthis.state = 62;\n\t\t\tthis.pickKey();\n\t\t\tthis.state = 67;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);\n\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\n\t\t\t\tif (_alt === 1) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 63;\n\t\t\t\t\tthis.match(QueryParser.COMMA);\n\t\t\t\t\tthis.state = 64;\n\t\t\t\t\tthis.pickKey();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 69;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);\n\t\t\t}\n\t\t\tthis.state = 71;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === QueryParser.COMMA) {\n\t\t\t\t{\n\t\t\t\tthis.state = 70;\n\t\t\t\tthis.match(QueryParser.COMMA);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state = 73;\n\t\t\tthis.match(QueryParser.CB);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic arrayPickParam(): ArrayPickParamContext {\n\t\tlet _localctx: ArrayPickParamContext = new ArrayPickParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 12, QueryParser.RULE_arrayPickParam);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tlet _alt: number;\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 75;\n\t\t\tthis.match(QueryParser.PLURAL_PARAM_MARK);\n\t\t\tthis.state = 76;\n\t\t\tthis.paramName();\n\t\t\tthis.state = 77;\n\t\t\tthis.match(QueryParser.OB);\n\t\t\tthis.state = 78;\n\t\t\tthis.pickKey();\n\t\t\tthis.state = 83;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);\n\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\n\t\t\t\tif (_alt === 1) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 79;\n\t\t\t\t\tthis.match(QueryParser.COMMA);\n\t\t\t\t\tthis.state = 80;\n\t\t\t\t\tthis.pickKey();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 85;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);\n\t\t\t}\n\t\t\tthis.state = 87;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === QueryParser.COMMA) {\n\t\t\t\t{\n\t\t\t\tthis.state = 86;\n\t\t\t\tthis.match(QueryParser.COMMA);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state = 89;\n\t\t\tthis.match(QueryParser.CB);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic arrayParam(): ArrayParamContext {\n\t\tlet _localctx: ArrayParamContext = new ArrayParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 14, QueryParser.RULE_arrayParam);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 91;\n\t\t\tthis.match(QueryParser.PLURAL_PARAM_MARK);\n\t\t\tthis.state = 92;\n\t\t\tthis.scalarParamName();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic scalarParamName(): ScalarParamNameContext {\n\t\tlet _localctx: ScalarParamNameContext = new ScalarParamNameContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 16, QueryParser.RULE_scalarParamName);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 94;\n\t\t\tthis.match(QueryParser.ID);\n\t\t\tthis.state = 96;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\tthis.state = 95;\n\t\t\t\tthis.match(QueryParser.REQUIRED_MARK);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic paramName(): ParamNameContext {\n\t\tlet _localctx: ParamNameContext = new ParamNameContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 18, QueryParser.RULE_paramName);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 98;\n\t\t\tthis.match(QueryParser.ID);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic pickKey(): PickKeyContext {\n\t\tlet _localctx: PickKeyContext = new PickKeyContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 20, QueryParser.RULE_pickKey);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 100;\n\t\t\tthis.match(QueryParser.ID);\n\t\t\tthis.state = 102;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === QueryParser.REQUIRED_MARK) {\n\t\t\t\t{\n\t\t\t\tthis.state = 101;\n\t\t\t\tthis.match(QueryParser.REQUIRED_MARK);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x0Ek\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n\t\t\"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x03\\x02\\x03\\x02\" +\n\t\t\"\\x05\\x02\\x1B\\n\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x06\\x03 \\n\\x03\\r\\x03\\x0E\\x03\" +\n\t\t\"!\\x03\\x03\\x03\\x03\\x07\\x03&\\n\\x03\\f\\x03\\x0E\\x03)\\v\\x03\\x07\\x03+\\n\\x03\\f\" +\n\t\t\"\\x03\\x0E\\x03.\\v\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x044\\n\\x04\\x03\" +\n\t\t\"\\x05\\x06\\x057\\n\\x05\\r\\x05\\x0E\\x058\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\" +\n\t\t\"\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x07\\x07D\\n\\x07\\f\\x07\\x0E\\x07G\\v\\x07\" +\n\t\t\"\\x03\\x07\\x05\\x07J\\n\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\" +\n\t\t\"\\x03\\b\\x07\\bT\\n\\b\\f\\b\\x0E\\bW\\v\\b\\x03\\b\\x05\\bZ\\n\\b\\x03\\b\\x03\\b\\x03\\t\\x03\" +\n\t\t\"\\t\\x03\\t\\x03\\n\\x03\\n\\x05\\nc\\n\\n\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x05\\fi\\n\\f\\x03\" +\n\t\t\"\\f\\x02\\x02\\x02\\r\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x0E\\x02\\x10\" +\n\t\t\"\\x02\\x12\\x02\\x14\\x02\\x16\\x02\\x02\\x03\\x05\\x02\\x03\\x03\\x06\\v\\x0E\\x0E\\x02\" +\n\t\t\"m\\x02\\x18\\x03\\x02\\x02\\x02\\x04\\x1F\\x03\\x02\\x02\\x02\\x063\\x03\\x02\\x02\\x02\" +\n\t\t\"\\b6\\x03\\x02\\x02\\x02\\n:\\x03\\x02\\x02\\x02\\f=\\x03\\x02\\x02\\x02\\x0EM\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x10]\\x03\\x02\\x02\\x02\\x12`\\x03\\x02\\x02\\x02\\x14d\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x16f\\x03\\x02\\x02\\x02\\x18\\x1A\\x05\\x04\\x03\\x02\\x19\\x1B\\x07\\f\\x02\\x02\\x1A\" +\n\t\t\"\\x19\\x03\\x02\\x02\\x02\\x1A\\x1B\\x03\\x02\\x02\\x02\\x1B\\x1C\\x03\\x02\\x02\\x02\\x1C\" +\n\t\t\"\\x1D\\x07\\x02\\x02\\x03\\x1D\\x03\\x03\\x02\\x02\\x02\\x1E \\x05\\b\\x05\\x02\\x1F\\x1E\" +\n\t\t\"\\x03\\x02\\x02\\x02 !\\x03\\x02\\x02\\x02!\\x1F\\x03\\x02\\x02\\x02!\\\"\\x03\\x02\\x02\" +\n\t\t\"\\x02\\\",\\x03\\x02\\x02\\x02#\\'\\x05\\x06\\x04\\x02$&\\x05\\b\\x05\\x02%$\\x03\\x02\\x02\" +\n\t\t\"\\x02&)\\x03\\x02\\x02\\x02\\'%\\x03\\x02\\x02\\x02\\'(\\x03\\x02\\x02\\x02(+\\x03\\x02\" +\n\t\t\"\\x02\\x02)\\'\\x03\\x02\\x02\\x02*#\\x03\\x02\\x02\\x02+.\\x03\\x02\\x02\\x02,*\\x03\" +\n\t\t\"\\x02\\x02\\x02,-\\x03\\x02\\x02\\x02-\\x05\\x03\\x02\\x02\\x02.,\\x03\\x02\\x02\\x02\" +\n\t\t\"/4\\x05\\f\\x07\\x0204\\x05\\x0E\\b\\x0214\\x05\\n\\x06\\x0224\\x05\\x10\\t\\x023/\\x03\" +\n\t\t\"\\x02\\x02\\x0230\\x03\\x02\\x02\\x0231\\x03\\x02\\x02\\x0232\\x03\\x02\\x02\\x024\\x07\" +\n\t\t\"\\x03\\x02\\x02\\x0257\\t\\x02\\x02\\x0265\\x03\\x02\\x02\\x0278\\x03\\x02\\x02\\x028\" +\n\t\t\"6\\x03\\x02\\x02\\x0289\\x03\\x02\\x02\\x029\\t\\x03\\x02\\x02\\x02:;\\x07\\x04\\x02\\x02\" +\n\t\t\";<\\x05\\x12\\n\\x02<\\v\\x03\\x02\\x02\\x02=>\\x07\\x04\\x02\\x02>?\\x05\\x14\\v\\x02\" +\n\t\t\"?@\\x07\\x07\\x02\\x02@E\\x05\\x16\\f\\x02AB\\x07\\x06\\x02\\x02BD\\x05\\x16\\f\\x02C\" +\n\t\t\"A\\x03\\x02\\x02\\x02DG\\x03\\x02\\x02\\x02EC\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02\" +\n\t\t\"FI\\x03\\x02\\x02\\x02GE\\x03\\x02\\x02\\x02HJ\\x07\\x06\\x02\\x02IH\\x03\\x02\\x02\\x02\" +\n\t\t\"IJ\\x03\\x02\\x02\\x02JK\\x03\\x02\\x02\\x02KL\\x07\\b\\x02\\x02L\\r\\x03\\x02\\x02\\x02\" +\n\t\t\"MN\\x07\\x05\\x02\\x02NO\\x05\\x14\\v\\x02OP\\x07\\x07\\x02\\x02PU\\x05\\x16\\f\\x02Q\" +\n\t\t\"R\\x07\\x06\\x02\\x02RT\\x05\\x16\\f\\x02SQ\\x03\\x02\\x02\\x02TW\\x03\\x02\\x02\\x02\" +\n\t\t\"US\\x03\\x02\\x02\\x02UV\\x03\\x02\\x02\\x02VY\\x03\\x02\\x02\\x02WU\\x03\\x02\\x02\\x02\" +\n\t\t\"XZ\\x07\\x06\\x02\\x02YX\\x03\\x02\\x02\\x02YZ\\x03\\x02\\x02\\x02Z[\\x03\\x02\\x02\\x02\" +\n\t\t\"[\\\\\\x07\\b\\x02\\x02\\\\\\x0F\\x03\\x02\\x02\\x02]^\\x07\\x05\\x02\\x02^_\\x05\\x12\\n\" +\n\t\t\"\\x02_\\x11\\x03\\x02\\x02\\x02`b\\x07\\x03\\x02\\x02ac\\x07\\n\\x02\\x02ba\\x03\\x02\" +\n\t\t\"\\x02\\x02bc\\x03\\x02\\x02\\x02c\\x13\\x03\\x02\\x02\\x02de\\x07\\x03\\x02\\x02e\\x15\" +\n\t\t\"\\x03\\x02\\x02\\x02fh\\x07\\x03\\x02\\x02gi\\x07\\n\\x02\\x02hg\\x03\\x02\\x02\\x02h\" +\n\t\t\"i\\x03\\x02\\x02\\x02i\\x17\\x03\\x02\\x02\\x02\\x0E\\x1A!\\',38EIUYbh\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!QueryParser.__ATN) {\n\t\t\tQueryParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QueryParser._serializedATN));\n\t\t}\n\n\t\treturn QueryParser.__ATN;\n\t}\n\n}\n\nexport class InputContext extends ParserRuleContext {\n\tpublic query(): QueryContext {\n\t\treturn this.getRuleContext(0, QueryContext);\n\t}\n\tpublic EOF(): TerminalNode { return this.getToken(QueryParser.EOF, 0); }\n\tpublic EOF_STATEMENT(): TerminalNode | undefined { return this.tryGetToken(QueryParser.EOF_STATEMENT, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_input; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterInput) {\n\t\t\tlistener.enterInput(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitInput) {\n\t\t\tlistener.exitInput(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitInput) {\n\t\t\treturn visitor.visitInput(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class QueryContext extends ParserRuleContext {\n\tpublic ignored(): IgnoredContext[];\n\tpublic ignored(i: number): IgnoredContext;\n\tpublic ignored(i?: number): IgnoredContext | IgnoredContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(IgnoredContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, IgnoredContext);\n\t\t}\n\t}\n\tpublic param(): ParamContext[];\n\tpublic param(i: number): ParamContext;\n\tpublic param(i?: number): ParamContext | ParamContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(ParamContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, ParamContext);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_query; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterQuery) {\n\t\t\tlistener.enterQuery(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitQuery) {\n\t\t\tlistener.exitQuery(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitQuery) {\n\t\t\treturn visitor.visitQuery(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamContext extends ParserRuleContext {\n\tpublic pickParam(): PickParamContext | undefined {\n\t\treturn this.tryGetRuleContext(0, PickParamContext);\n\t}\n\tpublic arrayPickParam(): ArrayPickParamContext | undefined {\n\t\treturn this.tryGetRuleContext(0, ArrayPickParamContext);\n\t}\n\tpublic scalarParam(): ScalarParamContext | undefined {\n\t\treturn this.tryGetRuleContext(0, ScalarParamContext);\n\t}\n\tpublic arrayParam(): ArrayParamContext | undefined {\n\t\treturn this.tryGetRuleContext(0, ArrayParamContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_param; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterParam) {\n\t\t\tlistener.enterParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitParam) {\n\t\t\tlistener.exitParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitParam) {\n\t\t\treturn visitor.visitParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class IgnoredContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode[];\n\tpublic ID(i: number): TerminalNode;\n\tpublic ID(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.ID);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.ID, i);\n\t\t}\n\t}\n\tpublic WORD(): TerminalNode[];\n\tpublic WORD(i: number): TerminalNode;\n\tpublic WORD(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.WORD);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.WORD, i);\n\t\t}\n\t}\n\tpublic STRING(): TerminalNode[];\n\tpublic STRING(i: number): TerminalNode;\n\tpublic STRING(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.STRING);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.STRING, i);\n\t\t}\n\t}\n\tpublic COMMA(): TerminalNode[];\n\tpublic COMMA(i: number): TerminalNode;\n\tpublic COMMA(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.COMMA);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.COMMA, i);\n\t\t}\n\t}\n\tpublic OB(): TerminalNode[];\n\tpublic OB(i: number): TerminalNode;\n\tpublic OB(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.OB);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.OB, i);\n\t\t}\n\t}\n\tpublic CB(): TerminalNode[];\n\tpublic CB(i: number): TerminalNode;\n\tpublic CB(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.CB);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.CB, i);\n\t\t}\n\t}\n\tpublic SPECIAL(): TerminalNode[];\n\tpublic SPECIAL(i: number): TerminalNode;\n\tpublic SPECIAL(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.SPECIAL);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.SPECIAL, i);\n\t\t}\n\t}\n\tpublic REQUIRED_MARK(): TerminalNode[];\n\tpublic REQUIRED_MARK(i: number): TerminalNode;\n\tpublic REQUIRED_MARK(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.REQUIRED_MARK);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.REQUIRED_MARK, i);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_ignored; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterIgnored) {\n\t\t\tlistener.enterIgnored(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitIgnored) {\n\t\t\tlistener.exitIgnored(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitIgnored) {\n\t\t\treturn visitor.visitIgnored(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ScalarParamContext extends ParserRuleContext {\n\tpublic SINGULAR_PARAM_MARK(): TerminalNode { return this.getToken(QueryParser.SINGULAR_PARAM_MARK, 0); }\n\tpublic scalarParamName(): ScalarParamNameContext {\n\t\treturn this.getRuleContext(0, ScalarParamNameContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_scalarParam; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterScalarParam) {\n\t\t\tlistener.enterScalarParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitScalarParam) {\n\t\t\tlistener.exitScalarParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitScalarParam) {\n\t\t\treturn visitor.visitScalarParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class PickParamContext extends ParserRuleContext {\n\tpublic SINGULAR_PARAM_MARK(): TerminalNode { return this.getToken(QueryParser.SINGULAR_PARAM_MARK, 0); }\n\tpublic paramName(): ParamNameContext {\n\t\treturn this.getRuleContext(0, ParamNameContext);\n\t}\n\tpublic OB(): TerminalNode { return this.getToken(QueryParser.OB, 0); }\n\tpublic pickKey(): PickKeyContext[];\n\tpublic pickKey(i: number): PickKeyContext;\n\tpublic pickKey(i?: number): PickKeyContext | PickKeyContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(PickKeyContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, PickKeyContext);\n\t\t}\n\t}\n\tpublic CB(): TerminalNode { return this.getToken(QueryParser.CB, 0); }\n\tpublic COMMA(): TerminalNode[];\n\tpublic COMMA(i: number): TerminalNode;\n\tpublic COMMA(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.COMMA);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.COMMA, i);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_pickParam; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterPickParam) {\n\t\t\tlistener.enterPickParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitPickParam) {\n\t\t\tlistener.exitPickParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitPickParam) {\n\t\t\treturn visitor.visitPickParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ArrayPickParamContext extends ParserRuleContext {\n\tpublic PLURAL_PARAM_MARK(): TerminalNode { return this.getToken(QueryParser.PLURAL_PARAM_MARK, 0); }\n\tpublic paramName(): ParamNameContext {\n\t\treturn this.getRuleContext(0, ParamNameContext);\n\t}\n\tpublic OB(): TerminalNode { return this.getToken(QueryParser.OB, 0); }\n\tpublic pickKey(): PickKeyContext[];\n\tpublic pickKey(i: number): PickKeyContext;\n\tpublic pickKey(i?: number): PickKeyContext | PickKeyContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(PickKeyContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, PickKeyContext);\n\t\t}\n\t}\n\tpublic CB(): TerminalNode { return this.getToken(QueryParser.CB, 0); }\n\tpublic COMMA(): TerminalNode[];\n\tpublic COMMA(i: number): TerminalNode;\n\tpublic COMMA(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(QueryParser.COMMA);\n\t\t} else {\n\t\t\treturn this.getToken(QueryParser.COMMA, i);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_arrayPickParam; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterArrayPickParam) {\n\t\t\tlistener.enterArrayPickParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitArrayPickParam) {\n\t\t\tlistener.exitArrayPickParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitArrayPickParam) {\n\t\t\treturn visitor.visitArrayPickParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ArrayParamContext extends ParserRuleContext {\n\tpublic PLURAL_PARAM_MARK(): TerminalNode { return this.getToken(QueryParser.PLURAL_PARAM_MARK, 0); }\n\tpublic scalarParamName(): ScalarParamNameContext {\n\t\treturn this.getRuleContext(0, ScalarParamNameContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_arrayParam; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterArrayParam) {\n\t\t\tlistener.enterArrayParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitArrayParam) {\n\t\t\tlistener.exitArrayParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitArrayParam) {\n\t\t\treturn visitor.visitArrayParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ScalarParamNameContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(QueryParser.ID, 0); }\n\tpublic REQUIRED_MARK(): TerminalNode | undefined { return this.tryGetToken(QueryParser.REQUIRED_MARK, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_scalarParamName; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterScalarParamName) {\n\t\t\tlistener.enterScalarParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitScalarParamName) {\n\t\t\tlistener.exitScalarParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitScalarParamName) {\n\t\t\treturn visitor.visitScalarParamName(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamNameContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(QueryParser.ID, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_paramName; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterParamName) {\n\t\t\tlistener.enterParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitParamName) {\n\t\t\tlistener.exitParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitParamName) {\n\t\t\treturn visitor.visitParamName(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class PickKeyContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(QueryParser.ID, 0); }\n\tpublic REQUIRED_MARK(): TerminalNode | undefined { return this.tryGetToken(QueryParser.REQUIRED_MARK, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return QueryParser.RULE_pickKey; }\n\t// @Override\n\tpublic enterRule(listener: QueryParserListener): void {\n\t\tif (listener.enterPickKey) {\n\t\t\tlistener.enterPickKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: QueryParserListener): void {\n\t\tif (listener.exitPickKey) {\n\t\t\tlistener.exitPickKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: QueryParserVisitor<Result>): Result {\n\t\tif (visitor.visitPickKey) {\n\t\t\treturn visitor.visitPickKey(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n", "import chalk, { ChalkFunction } from 'chalk';\nimport { ANTLRErrorListener } from 'antlr4ts';\nimport { RecognitionException } from 'antlr4ts/RecognitionException.js';\n\ninterface CodeInterval {\n  a: number;\n  b: number;\n  line: number;\n  col: number;\n}\n\nexport enum ParseWarningType {\n  ParamNeverUsed,\n}\n\nenum ParseErrorType {\n  ParseError,\n}\n\nexport enum ParseEventType {\n  Info,\n  Warning,\n  Error,\n}\n\nexport type ParseEvent =\n  | {\n      type: ParseEventType.Warning;\n      message: {\n        text: string;\n        type: ParseWarningType;\n      };\n      location?: CodeInterval;\n    }\n  | {\n      type: ParseEventType.Error;\n      critical: true;\n      message: {\n        text: string;\n        type: ParseErrorType;\n      };\n      location?: CodeInterval;\n    };\n\nfunction styleIntervals(\n  str: string,\n  intervals: { a: number; b: number; style: ChalkFunction }[],\n) {\n  if (intervals.length === 0) {\n    return str;\n  }\n  intervals.sort((x, y) => x.a - y.a);\n  let offset = 0;\n  let colored = '';\n  for (const interval of intervals) {\n    const a = str.slice(0, interval.a + offset);\n    const b = str.slice(interval.a + offset, interval.b + offset + 1);\n    const c = str.slice(interval.b + offset + 1, str.length);\n    colored = a + interval.style(b) + c;\n    offset += colored.length - str.length;\n    str = colored;\n  }\n  return colored;\n}\n\nexport function prettyPrintEvents(text: string, parseEvents: ParseEvent[]) {\n  let msg = chalk.underline.magenta('Parsed file:\\n');\n  const errors = parseEvents.filter((e) => e.type === ParseEventType.Error);\n  const warnings = parseEvents.filter((e) => e.type === ParseEventType.Warning);\n  const lineStyle = {} as any;\n  const locsToColor = parseEvents\n    .filter((w) => w.location)\n    .map((w) => {\n      const style =\n        w.type === ParseEventType.Error\n          ? chalk.underline.red\n          : chalk.underline.yellow;\n      if (w.location?.line) {\n        lineStyle[w.location.line] = style;\n      }\n      return {\n        ...w.location,\n        style,\n      };\n    });\n  const styledText = styleIntervals(text, locsToColor as any);\n  let i = 1;\n  const numberedText = styledText.replace(/^/gm, () => {\n    const prefix = lineStyle[i] ? lineStyle[i]('>') : '|';\n    return `${i++} ${prefix} `;\n  });\n  msg += numberedText;\n  if (errors.length > 0) {\n    msg += chalk.underline.red('\\nErrors:\\n');\n    msg += errors\n      .map(\n        (w) => `- (${w.location?.line}:${w.location?.col}) ${w.message.text}`,\n      )\n      .join('\\n');\n  }\n  if (warnings.length > 0) {\n    msg += chalk.underline.yellow('\\nWarnings:\\n');\n    msg += warnings\n      .map(\n        (w) => `- (${w.location?.line}:${w.location?.col}) ${w.message.text}`,\n      )\n      .join('\\n');\n  }\n  // tslint:disable-next-line:no-console\n  console.log(msg);\n}\n\nexport class Logger implements ANTLRErrorListener<any> {\n  public parseEvents: ParseEvent[] = [];\n\n  logEvent(event: ParseEvent) {\n    this.parseEvents.push(event);\n  }\n\n  syntaxError(\n    _recognizer: any,\n    symbol: any,\n    line: number,\n    col: number,\n    msg: string,\n    _e: RecognitionException | undefined,\n  ) {\n    this.logEvent({\n      type: ParseEventType.Error,\n      critical: true,\n      message: {\n        type: ParseErrorType.ParseError,\n        text: `Parse error: ${msg}`,\n      },\n      location: {\n        a: symbol?.startIndex,\n        b: symbol?.stopIndex,\n        line,\n        col,\n      },\n    });\n  }\n}\n", "import { SQLParserListener } from './parser/SQLParserListener.js';\nimport { CharStreams, CommonTokenStream } from 'antlr4ts';\nimport { ParseTreeWalker } from 'antlr4ts/tree/ParseTreeWalker.js';\nimport { SQLLexer } from './parser/SQLLexer.js';\nimport {\n  IgnoredCommentContext,\n  KeyContext,\n  ParamIdContext,\n  ParamNameContext,\n  QueryNameContext,\n  SQLParser,\n  StatementBodyContext,\n} from './parser/SQLParser.js';\nimport {\n  Logger,\n  ParseEvent,\n  ParseEventType,\n  ParseWarningType,\n} from './logger.js';\nimport { Interval } from 'antlr4ts/misc/index.js';\n\nexport enum TransformType {\n  Scalar = 'scalar',\n  PickTuple = 'pick_tuple',\n  ArraySpread = 'array_spread',\n  PickArraySpread = 'pick_array_spread',\n}\n\nexport interface ParamKey {\n  name: string;\n  required: boolean;\n}\n\nexport type ParamTransform =\n  | {\n      type: TransformType.Scalar;\n    }\n  | {\n      type: TransformType.ArraySpread;\n    }\n  | {\n      type: TransformType.PickTuple | TransformType.PickArraySpread;\n      keys: ParamKey[];\n    };\n\nexport interface Param {\n  name: string;\n  transform: ParamTransform;\n  required: boolean;\n  codeRefs: {\n    defined?: CodeInterval;\n    used: CodeInterval[];\n  };\n}\ninterface CodeInterval {\n  a: number;\n  b: number;\n  line: number;\n  col: number;\n}\n\ninterface Statement {\n  loc: CodeInterval;\n  body: string;\n}\n\nexport interface QueryAST {\n  name: string;\n  params: Param[];\n  statement: Statement;\n  usedParamSet: { [paramName: string]: true };\n}\n\nexport interface ParamIR {\n  name: string;\n  transform: ParamTransform;\n  required: boolean;\n  locs: {\n    a: number;\n    b: number;\n  }[];\n}\nexport interface QueryIR {\n  params: ParamIR[];\n  statement: string;\n  usedParamSet: QueryAST['usedParamSet'];\n}\n\ninterface ParseTree {\n  queries: QueryAST[];\n}\n\nexport function assert(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error('Assertion Failed');\n  }\n}\n\nclass ParseListener implements SQLParserListener {\n  logger: Logger;\n  public parseTree: ParseTree = { queries: [] };\n  private currentQuery: Partial<QueryAST> = {};\n  private currentParam: Partial<Param> = {};\n  private currentTransform: Partial<ParamTransform> = {};\n\n  constructor(logger: Logger) {\n    this.logger = logger;\n  }\n\n  exitQuery() {\n    const currentQuery = this.currentQuery as QueryAST;\n    currentQuery.params.forEach((p) => {\n      const paramUsed = p.name in currentQuery.usedParamSet;\n      if (!paramUsed) {\n        this.logger.logEvent({\n          type: ParseEventType.Warning,\n          message: {\n            type: ParseWarningType.ParamNeverUsed,\n            text: `Parameter \"${p.name}\" is defined but never used`,\n          },\n          location: p.codeRefs.defined,\n        });\n      }\n    });\n    this.parseTree.queries.push(currentQuery);\n  }\n\n  enterQueryName(ctx: QueryNameContext) {\n    this.currentQuery = {\n      name: ctx.text,\n      params: [],\n      usedParamSet: {},\n    };\n  }\n\n  enterParamName(ctx: ParamNameContext) {\n    const defLoc = {\n      a: ctx.start.startIndex,\n      b: ctx.start.stopIndex,\n      line: ctx.start.line,\n      col: ctx.start.charPositionInLine,\n    };\n    this.currentParam = {\n      name: ctx.text,\n      codeRefs: {\n        defined: defLoc,\n        used: [],\n      },\n    };\n  }\n\n  exitParamTag() {\n    assert(this.currentQuery.params);\n    this.currentQuery.params.push(this.currentParam as Param);\n  }\n\n  exitTransformRule() {\n    this.currentParam.transform = this.currentTransform as ParamTransform;\n  }\n\n  enterTransformRule() {\n    this.currentTransform = {};\n  }\n\n  enterSpreadTransform() {\n    this.currentTransform = {\n      type: TransformType.ArraySpread,\n    };\n  }\n\n  enterSpreadPickTransform() {\n    this.currentTransform = {\n      type: TransformType.PickArraySpread,\n      keys: [],\n    };\n  }\n\n  enterPickTransform() {\n    if (this.currentTransform.type === TransformType.PickArraySpread) {\n      return;\n    }\n    this.currentTransform = {\n      type: TransformType.PickTuple,\n      keys: [],\n    };\n  }\n\n  enterKey(ctx: KeyContext) {\n    assert('keys' in this.currentTransform && this.currentTransform.keys);\n\n    const required = !!ctx.C_REQUIRED_MARK();\n    const name = ctx.ID().text;\n\n    this.currentTransform.keys.push({ name, required });\n  }\n\n  enterStatementBody(ctx: StatementBodyContext) {\n    const { inputStream } = ctx.start;\n    assert(inputStream);\n    const a = ctx.start.startIndex;\n    const b = ctx.stop?.stopIndex;\n    assert(b);\n    const interval = new Interval(a, b);\n    const body = inputStream.getText(interval);\n    const loc = {\n      a,\n      b,\n      line: ctx.start.line,\n      col: ctx.start.charPositionInLine,\n    };\n    this.currentQuery.statement = {\n      body,\n      loc,\n    };\n  }\n\n  /** strip JS-like comments from SQL statements */\n  exitIgnoredComment(ctx: IgnoredCommentContext) {\n    if (!this.currentQuery.statement) {\n      return;\n    }\n    assert(this.currentQuery.statement);\n    const statement = this.currentQuery.statement;\n    const a = ctx.start.startIndex - statement.loc.a;\n    const b = ctx.stop!.stopIndex - statement.loc.a + 1;\n    const body = statement.body;\n    assert(b);\n    const [partA, , partB] = [\n      body.slice(0, a),\n      body.slice(a, b),\n      body.slice(b),\n    ];\n    const strippedStatement = partA + ' '.repeat(b - a) + partB;\n    this.currentQuery.statement.body = strippedStatement;\n  }\n\n  enterParamId(ctx: ParamIdContext) {\n    assert(this.currentQuery.params);\n    assert(this.currentQuery.usedParamSet);\n\n    const paramName = ctx.ID().text;\n    const required = !!ctx.S_REQUIRED_MARK();\n\n    this.currentQuery.usedParamSet[paramName] = true;\n    const reference = this.currentQuery.params.find(\n      (p) => p.name === paramName,\n    );\n    const useLoc = {\n      a: ctx.start.startIndex,\n      b: ctx.stop?.stopIndex ?? ctx.start.stopIndex,\n      line: ctx.start.line,\n      col: ctx.start.charPositionInLine,\n    };\n\n    if (!reference) {\n      this.currentQuery.params.push({\n        name: paramName,\n        required,\n        transform: { type: TransformType.Scalar },\n        codeRefs: {\n          used: [useLoc],\n        },\n      });\n    } else {\n      reference.required = reference.required || required;\n      reference.codeRefs.used.push(useLoc);\n    }\n  }\n}\n\nexport type SQLParseResult = { queries: QueryAST[]; events: ParseEvent[] };\n\nfunction parseText(text: string): SQLParseResult {\n  const logger = new Logger();\n  const inputStream = CharStreams.fromString(text);\n  const lexer = new SQLLexer(inputStream);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(logger);\n  const tokenStream = new CommonTokenStream(lexer);\n  const parser = new SQLParser(tokenStream);\n  parser.removeErrorListeners();\n  parser.addErrorListener(logger);\n\n  const tree = parser.input();\n\n  const listener = new ParseListener(logger);\n  ParseTreeWalker.DEFAULT.walk(listener as SQLParserListener, tree);\n  return {\n    queries: listener.parseTree.queries,\n    events: logger.parseEvents,\n  };\n}\n\nexport function queryASTToIR(query: SQLQueryAST): SQLQueryIR {\n  const { a: statementStart } = query.statement.loc;\n\n  return {\n    usedParamSet: query.usedParamSet,\n    params: query.params.map((param) => ({\n      name: param.name,\n      required: param.required,\n      transform: param.transform,\n      locs: param.codeRefs.used.map((codeRef) => ({\n        a: codeRef.a - statementStart - 1,\n        b: codeRef.b - statementStart,\n      })),\n    })),\n    statement: query.statement.body,\n  };\n}\n\nexport { prettyPrintEvents, ParseEvent } from './logger.js';\nexport type SQLQueryAST = QueryAST;\nexport type SQLQueryIR = QueryIR;\nexport default parseText;\n", "// Generated from src/loader/sql/grammar/SQLLexer.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ATN } from \"antlr4ts/atn/ATN.js\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer.js\";\nimport { CharStream } from \"antlr4ts/CharStream.js\";\nimport { Lexer } from \"antlr4ts/Lexer.js\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator.js\";\nimport { NotNull } from \"antlr4ts/Decorators.js\";\nimport { Override } from \"antlr4ts/Decorators.js\";\nimport { RuleContext } from \"antlr4ts/RuleContext.js\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary.js\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl.js\";\n\nimport * as Utils from \"antlr4ts/misc/Utils.js\";\n\n\nexport class SQLLexer extends Lexer {\n\tpublic static readonly ID = 1;\n\tpublic static readonly LINE_COMMENT = 2;\n\tpublic static readonly OPEN_COMMENT = 3;\n\tpublic static readonly S_REQUIRED_MARK = 4;\n\tpublic static readonly WORD = 5;\n\tpublic static readonly EOF_STATEMENT = 6;\n\tpublic static readonly WSL = 7;\n\tpublic static readonly STRING = 8;\n\tpublic static readonly DOLLAR_STRING = 9;\n\tpublic static readonly PARAM_MARK = 10;\n\tpublic static readonly WS = 11;\n\tpublic static readonly TRANSFORM_ARROW = 12;\n\tpublic static readonly SPREAD = 13;\n\tpublic static readonly NAME_TAG = 14;\n\tpublic static readonly TYPE_TAG = 15;\n\tpublic static readonly OB = 16;\n\tpublic static readonly CB = 17;\n\tpublic static readonly COMMA = 18;\n\tpublic static readonly C_REQUIRED_MARK = 19;\n\tpublic static readonly ANY = 20;\n\tpublic static readonly CLOSE_COMMENT = 21;\n\tpublic static readonly DOLLAR = 22;\n\tpublic static readonly CAST = 23;\n\tpublic static readonly COMMENT = 1;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\", \"COMMENT\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"QUOT\", \"ID\", \"LINE_COMMENT\", \"OPEN_COMMENT\", \"SID\", \"S_REQUIRED_MARK\",\n\t\t\"WORD\", \"SPECIAL\", \"DOLLAR\", \"EOF_STATEMENT\", \"WSL\", \"STRING\", \"DOLLAR_STRING\",\n\t\t\"PARAM_MARK\", \"CAST\", \"CID\", \"WS\", \"TRANSFORM_ARROW\", \"SPREAD\", \"NAME_TAG\",\n\t\t\"TYPE_TAG\", \"OB\", \"CB\", \"COMMA\", \"C_REQUIRED_MARK\", \"ANY\", \"CLOSE_COMMENT\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, undefined, \"'/*'\", undefined, undefined, \"';'\",\n\t\tundefined, undefined, undefined, \"':'\", undefined, \"'->'\", \"'...'\", \"'@name'\",\n\t\t\"'@param'\", \"'('\", \"')'\", \"','\", undefined, undefined, \"'*/'\", \"'$'\",\n\t\t\"'::'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ID\", \"LINE_COMMENT\", \"OPEN_COMMENT\", \"S_REQUIRED_MARK\", \"WORD\",\n\t\t\"EOF_STATEMENT\", \"WSL\", \"STRING\", \"DOLLAR_STRING\", \"PARAM_MARK\", \"WS\",\n\t\t\"TRANSFORM_ARROW\", \"SPREAD\", \"NAME_TAG\", \"TYPE_TAG\", \"OB\", \"CB\", \"COMMA\",\n\t\t\"C_REQUIRED_MARK\", \"ANY\", \"CLOSE_COMMENT\", \"DOLLAR\", \"CAST\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SQLLexer._LITERAL_NAMES, SQLLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SQLLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(SQLLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SQLLexer.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SQLLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SQLLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return SQLLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return SQLLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x19\\xCA\\b\\x01\" +\n\t\t\"\\b\\x01\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\" +\n\t\t\"\\t\\x06\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\" +\n\t\t\"\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\" +\n\t\t\"\\x12\\t\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\" +\n\t\t\"\\x17\\t\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\" +\n\t\t\"\\x1C\\t\\x1C\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x07\\x03?\\n\\x03\\f\\x03\\x0E\\x03\" +\n\t\t\"B\\v\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x07\\x04H\\n\\x04\\f\\x04\\x0E\\x04K\" +\n\t\t\"\\v\\x04\\x03\\x04\\x05\\x04N\\n\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05\" +\n\t\t\"\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\b\" +\n\t\t\"\\x06\\b^\\n\\b\\r\\b\\x0E\\b_\\x03\\t\\x06\\tc\\n\\t\\r\\t\\x0E\\td\\x03\\t\\x03\\t\\x03\\n\\x03\" +\n\t\t\"\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\f\\x06\\fp\\n\\f\\r\\f\\x0E\\fq\\x03\\f\\x03\\f\\x03\" +\n\t\t\"\\r\\x03\\r\\x03\\r\\x07\\ry\\n\\r\\f\\r\\x0E\\r|\\v\\r\\x03\\r\\x03\\r\\x05\\r\\x80\\n\\r\\x03\" +\n\t\t\"\\x0E\\x03\\x0E\\x05\\x0E\\x84\\n\\x0E\\x03\\x0E\\x03\\x0E\\x07\\x0E\\x88\\n\\x0E\\f\\x0E\" +\n\t\t\"\\x0E\\x0E\\x8B\\v\\x0E\\x03\\x0E\\x03\\x0E\\x05\\x0E\\x8F\\n\\x0E\\x03\\x0E\\x03\\x0E\\x03\" +\n\t\t\"\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\" +\n\t\t\"\\x11\\x03\\x11\\x03\\x12\\x06\\x12\\x9F\\n\\x12\\r\\x12\\x0E\\x12\\xA0\\x03\\x12\\x03\\x12\" +\n\t\t\"\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\" +\n\t\t\"\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\" +\n\t\t\"\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\" +\n\t\t\"\\x03\\x1A\\x03\\x1B\\x06\\x1B\\xC2\\n\\x1B\\r\\x1B\\x0E\\x1B\\xC3\\x03\\x1C\\x03\\x1C\\x03\" +\n\t\t\"\\x1C\\x03\\x1C\\x03\\x1C\\x04z\\xC3\\x02\\x02\\x1D\\x04\\x02\\x02\\x06\\x02\\x03\\b\\x02\" +\n\t\t\"\\x04\\n\\x02\\x05\\f\\x02\\x02\\x0E\\x02\\x06\\x10\\x02\\x07\\x12\\x02\\x02\\x14\\x02\\x18\" +\n\t\t\"\\x16\\x02\\b\\x18\\x02\\t\\x1A\\x02\\n\\x1C\\x02\\v\\x1E\\x02\\f \\x02\\x19\\\"\\x02\\x02\" +\n\t\t\"$\\x02\\r&\\x02\\x0E(\\x02\\x0F*\\x02\\x10,\\x02\\x11.\\x02\\x120\\x02\\x132\\x02\\x14\" +\n\t\t\"4\\x02\\x156\\x02\\x168\\x02\\x17\\x04\\x02\\x03\\b\\x05\\x02C\\\\aac|\\x06\\x022;C\\\\\" +\n\t\t\"aac|\\x04\\x02\\f\\f\\x0F\\x0F\\n\\x02$%\\'(*1>B]]_`bb}\\x80\\x05\\x02\\v\\f\\x0F\\x0F\" +\n\t\t\"\\\"\\\"\\x03\\x02^^\\x02\\xD3\\x02\\b\\x03\\x02\\x02\\x02\\x02\\n\\x03\\x02\\x02\\x02\\x02\" +\n\t\t\"\\f\\x03\\x02\\x02\\x02\\x02\\x0E\\x03\\x02\\x02\\x02\\x02\\x10\\x03\\x02\\x02\\x02\\x02\" +\n\t\t\"\\x12\\x03\\x02\\x02\\x02\\x02\\x14\\x03\\x02\\x02\\x02\\x02\\x16\\x03\\x02\\x02\\x02\\x02\" +\n\t\t\"\\x18\\x03\\x02\\x02\\x02\\x02\\x1A\\x03\\x02\\x02\\x02\\x02\\x1C\\x03\\x02\\x02\\x02\\x02\" +\n\t\t\"\\x1E\\x03\\x02\\x02\\x02\\x02 \\x03\\x02\\x02\\x02\\x03\\\"\\x03\\x02\\x02\\x02\\x03$\\x03\" +\n\t\t\"\\x02\\x02\\x02\\x03&\\x03\\x02\\x02\\x02\\x03(\\x03\\x02\\x02\\x02\\x03*\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x03,\\x03\\x02\\x02\\x02\\x03.\\x03\\x02\\x02\\x02\\x030\\x03\\x02\\x02\\x02\\x03\" +\n\t\t\"2\\x03\\x02\\x02\\x02\\x034\\x03\\x02\\x02\\x02\\x036\\x03\\x02\\x02\\x02\\x038\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x04:\\x03\\x02\\x02\\x02\\x06<\\x03\\x02\\x02\\x02\\bC\\x03\\x02\\x02\\x02\" +\n\t\t\"\\nQ\\x03\\x02\\x02\\x02\\fV\\x03\\x02\\x02\\x02\\x0EZ\\x03\\x02\\x02\\x02\\x10]\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x12b\\x03\\x02\\x02\\x02\\x14h\\x03\\x02\\x02\\x02\\x16l\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x18o\\x03\\x02\\x02\\x02\\x1Au\\x03\\x02\\x02\\x02\\x1C\\x81\\x03\\x02\\x02\\x02\\x1E\" +\n\t\t\"\\x92\\x03\\x02\\x02\\x02 \\x94\\x03\\x02\\x02\\x02\\\"\\x99\\x03\\x02\\x02\\x02$\\x9E\\x03\" +\n\t\t\"\\x02\\x02\\x02&\\xA4\\x03\\x02\\x02\\x02(\\xA7\\x03\\x02\\x02\\x02*\\xAB\\x03\\x02\\x02\" +\n\t\t\"\\x02,\\xB1\\x03\\x02\\x02\\x02.\\xB8\\x03\\x02\\x02\\x020\\xBA\\x03\\x02\\x02\\x022\\xBC\" +\n\t\t\"\\x03\\x02\\x02\\x024\\xBE\\x03\\x02\\x02\\x026\\xC1\\x03\\x02\\x02\\x028\\xC5\\x03\\x02\" +\n\t\t\"\\x02\\x02:;\\x07)\\x02\\x02;\\x05\\x03\\x02\\x02\\x02<@\\t\\x02\\x02\\x02=?\\t\\x03\\x02\" +\n\t\t\"\\x02>=\\x03\\x02\\x02\\x02?B\\x03\\x02\\x02\\x02@>\\x03\\x02\\x02\\x02@A\\x03\\x02\\x02\" +\n\t\t\"\\x02A\\x07\\x03\\x02\\x02\\x02B@\\x03\\x02\\x02\\x02CD\\x07/\\x02\\x02DE\\x07/\\x02\" +\n\t\t\"\\x02EI\\x03\\x02\\x02\\x02FH\\n\\x04\\x02\\x02GF\\x03\\x02\\x02\\x02HK\\x03\\x02\\x02\" +\n\t\t\"\\x02IG\\x03\\x02\\x02\\x02IJ\\x03\\x02\\x02\\x02JM\\x03\\x02\\x02\\x02KI\\x03\\x02\\x02\" +\n\t\t\"\\x02LN\\x07\\x0F\\x02\\x02ML\\x03\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02NO\\x03\\x02\\x02\" +\n\t\t\"\\x02OP\\x07\\f\\x02\\x02P\\t\\x03\\x02\\x02\\x02QR\\x071\\x02\\x02RS\\x07,\\x02\\x02\" +\n\t\t\"ST\\x03\\x02\\x02\\x02TU\\b\\x05\\x02\\x02U\\v\\x03\\x02\\x02\\x02VW\\x05\\x06\\x03\\x02\" +\n\t\t\"WX\\x03\\x02\\x02\\x02XY\\b\\x06\\x03\\x02Y\\r\\x03\\x02\\x02\\x02Z[\\x07#\\x02\\x02[\" +\n\t\t\"\\x0F\\x03\\x02\\x02\\x02\\\\^\\t\\x03\\x02\\x02]\\\\\\x03\\x02\\x02\\x02^_\\x03\\x02\\x02\" +\n\t\t\"\\x02_]\\x03\\x02\\x02\\x02_`\\x03\\x02\\x02\\x02`\\x11\\x03\\x02\\x02\\x02ac\\t\\x05\" +\n\t\t\"\\x02\\x02ba\\x03\\x02\\x02\\x02cd\\x03\\x02\\x02\\x02db\\x03\\x02\\x02\\x02de\\x03\\x02\" +\n\t\t\"\\x02\\x02ef\\x03\\x02\\x02\\x02fg\\b\\t\\x04\\x02g\\x13\\x03\\x02\\x02\\x02hi\\x07&\\x02\" +\n\t\t\"\\x02ij\\x03\\x02\\x02\\x02jk\\b\\n\\x04\\x02k\\x15\\x03\\x02\\x02\\x02lm\\x07=\\x02\\x02\" +\n\t\t\"m\\x17\\x03\\x02\\x02\\x02np\\t\\x06\\x02\\x02on\\x03\\x02\\x02\\x02pq\\x03\\x02\\x02\" +\n\t\t\"\\x02qo\\x03\\x02\\x02\\x02qr\\x03\\x02\\x02\\x02rs\\x03\\x02\\x02\\x02st\\b\\f\\x05\\x02\" +\n\t\t\"t\\x19\\x03\\x02\\x02\\x02u\\x7F\\x05\\x04\\x02\\x02v\\x80\\x05\\x04\\x02\\x02wy\\v\\x02\" +\n\t\t\"\\x02\\x02xw\\x03\\x02\\x02\\x02y|\\x03\\x02\\x02\\x02z{\\x03\\x02\\x02\\x02zx\\x03\\x02\" +\n\t\t\"\\x02\\x02{}\\x03\\x02\\x02\\x02|z\\x03\\x02\\x02\\x02}~\\n\\x07\\x02\\x02~\\x80\\x05\" +\n\t\t\"\\x04\\x02\\x02\\x7Fv\\x03\\x02\\x02\\x02\\x7Fz\\x03\\x02\\x02\\x02\\x80\\x1B\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x81\\x83\\x05\\x14\\n\\x02\\x82\\x84\\x05\\x10\\b\\x02\\x83\\x82\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x83\\x84\\x03\\x02\\x02\\x02\\x84\\x85\\x03\\x02\\x02\\x02\\x85\\x89\\x05\\x14\\n\" +\n\t\t\"\\x02\\x86\\x88\\v\\x02\\x02\\x02\\x87\\x86\\x03\\x02\\x02\\x02\\x88\\x8B\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x89\\x87\\x03\\x02\\x02\\x02\\x89\\x8A\\x03\\x02\\x02\\x02\\x8A\\x8C\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x8B\\x89\\x03\\x02\\x02\\x02\\x8C\\x8E\\x05\\x14\\n\\x02\\x8D\\x8F\\x05\\x10\\b\\x02\" +\n\t\t\"\\x8E\\x8D\\x03\\x02\\x02\\x02\\x8E\\x8F\\x03\\x02\\x02\\x02\\x8F\\x90\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x90\\x91\\x05\\x14\\n\\x02\\x91\\x1D\\x03\\x02\\x02\\x02\\x92\\x93\\x07<\\x02\\x02\\x93\" +\n\t\t\"\\x1F\\x03\\x02\\x02\\x02\\x94\\x95\\x07<\\x02\\x02\\x95\\x96\\x07<\\x02\\x02\\x96\\x97\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x97\\x98\\b\\x10\\x04\\x02\\x98!\\x03\\x02\\x02\\x02\\x99\\x9A\\x05\" +\n\t\t\"\\x06\\x03\\x02\\x9A\\x9B\\x03\\x02\\x02\\x02\\x9B\\x9C\\b\\x11\\x03\\x02\\x9C#\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x9D\\x9F\\t\\x06\\x02\\x02\\x9E\\x9D\\x03\\x02\\x02\\x02\\x9F\\xA0\\x03\\x02\" +\n\t\t\"\\x02\\x02\\xA0\\x9E\\x03\\x02\\x02\\x02\\xA0\\xA1\\x03\\x02\\x02\\x02\\xA1\\xA2\\x03\\x02\" +\n\t\t\"\\x02\\x02\\xA2\\xA3\\b\\x12\\x05\\x02\\xA3%\\x03\\x02\\x02\\x02\\xA4\\xA5\\x07/\\x02\\x02\" +\n\t\t\"\\xA5\\xA6\\x07@\\x02\\x02\\xA6\\'\\x03\\x02\\x02\\x02\\xA7\\xA8\\x070\\x02\\x02\\xA8\\xA9\" +\n\t\t\"\\x070\\x02\\x02\\xA9\\xAA\\x070\\x02\\x02\\xAA)\\x03\\x02\\x02\\x02\\xAB\\xAC\\x07B\\x02\" +\n\t\t\"\\x02\\xAC\\xAD\\x07p\\x02\\x02\\xAD\\xAE\\x07c\\x02\\x02\\xAE\\xAF\\x07o\\x02\\x02\\xAF\" +\n\t\t\"\\xB0\\x07g\\x02\\x02\\xB0+\\x03\\x02\\x02\\x02\\xB1\\xB2\\x07B\\x02\\x02\\xB2\\xB3\\x07\" +\n\t\t\"r\\x02\\x02\\xB3\\xB4\\x07c\\x02\\x02\\xB4\\xB5\\x07t\\x02\\x02\\xB5\\xB6\\x07c\\x02\\x02\" +\n\t\t\"\\xB6\\xB7\\x07o\\x02\\x02\\xB7-\\x03\\x02\\x02\\x02\\xB8\\xB9\\x07*\\x02\\x02\\xB9/\\x03\" +\n\t\t\"\\x02\\x02\\x02\\xBA\\xBB\\x07+\\x02\\x02\\xBB1\\x03\\x02\\x02\\x02\\xBC\\xBD\\x07.\\x02\" +\n\t\t\"\\x02\\xBD3\\x03\\x02\\x02\\x02\\xBE\\xBF\\x07#\\x02\\x02\\xBF5\\x03\\x02\\x02\\x02\\xC0\" +\n\t\t\"\\xC2\\v\\x02\\x02\\x02\\xC1\\xC0\\x03\\x02\\x02\\x02\\xC2\\xC3\\x03\\x02\\x02\\x02\\xC3\" +\n\t\t\"\\xC4\\x03\\x02\\x02\\x02\\xC3\\xC1\\x03\\x02\\x02\\x02\\xC47\\x03\\x02\\x02\\x02\\xC5\" +\n\t\t\"\\xC6\\x07,\\x02\\x02\\xC6\\xC7\\x071\\x02\\x02\\xC7\\xC8\\x03\\x02\\x02\\x02\\xC8\\xC9\" +\n\t\t\"\\b\\x1C\\x06\\x02\\xC99\\x03\\x02\\x02\\x02\\x11\\x02\\x03@IM_dqz\\x7F\\x83\\x89\\x8E\" +\n\t\t\"\\xA0\\xC3\\x07\\x04\\x03\\x02\\t\\x03\\x02\\t\\x07\\x02\\b\\x02\\x02\\x04\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SQLLexer.__ATN) {\n\t\t\tSQLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SQLLexer._serializedATN));\n\t\t}\n\n\t\treturn SQLLexer.__ATN;\n\t}\n\n}\n\n", "// Generated from src/loader/sql/grammar/SQLParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ATN } from \"antlr4ts/atn/ATN.js\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer.js\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException.js\";\nimport { NotNull } from \"antlr4ts/Decorators.js\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException.js\";\nimport { Override } from \"antlr4ts/Decorators.js\";\nimport { Parser } from \"antlr4ts/Parser.js\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext.js\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator.js\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener.js\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor.js\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException.js\";\nimport { RuleContext } from \"antlr4ts/RuleContext.js\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode.js\";\nimport { Token } from \"antlr4ts/Token.js\";\nimport { TokenStream } from \"antlr4ts/TokenStream.js\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary.js\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl.js\";\n\nimport * as Utils from \"antlr4ts/misc/Utils.js\";\n\nimport { SQLParserListener } from \"./SQLParserListener.js\";\nimport { SQLParserVisitor } from \"./SQLParserVisitor.js\";\n\n\nexport class SQLParser extends Parser {\n\tpublic static readonly ID = 1;\n\tpublic static readonly LINE_COMMENT = 2;\n\tpublic static readonly OPEN_COMMENT = 3;\n\tpublic static readonly S_REQUIRED_MARK = 4;\n\tpublic static readonly WORD = 5;\n\tpublic static readonly EOF_STATEMENT = 6;\n\tpublic static readonly WSL = 7;\n\tpublic static readonly STRING = 8;\n\tpublic static readonly DOLLAR_STRING = 9;\n\tpublic static readonly PARAM_MARK = 10;\n\tpublic static readonly WS = 11;\n\tpublic static readonly TRANSFORM_ARROW = 12;\n\tpublic static readonly SPREAD = 13;\n\tpublic static readonly NAME_TAG = 14;\n\tpublic static readonly TYPE_TAG = 15;\n\tpublic static readonly OB = 16;\n\tpublic static readonly CB = 17;\n\tpublic static readonly COMMA = 18;\n\tpublic static readonly C_REQUIRED_MARK = 19;\n\tpublic static readonly ANY = 20;\n\tpublic static readonly CLOSE_COMMENT = 21;\n\tpublic static readonly DOLLAR = 22;\n\tpublic static readonly CAST = 23;\n\tpublic static readonly RULE_input = 0;\n\tpublic static readonly RULE_query = 1;\n\tpublic static readonly RULE_queryDef = 2;\n\tpublic static readonly RULE_ignoredComment = 3;\n\tpublic static readonly RULE_statement = 4;\n\tpublic static readonly RULE_statementBody = 5;\n\tpublic static readonly RULE_word = 6;\n\tpublic static readonly RULE_range = 7;\n\tpublic static readonly RULE_param = 8;\n\tpublic static readonly RULE_paramId = 9;\n\tpublic static readonly RULE_nameTag = 10;\n\tpublic static readonly RULE_paramTag = 11;\n\tpublic static readonly RULE_paramTransform = 12;\n\tpublic static readonly RULE_transformRule = 13;\n\tpublic static readonly RULE_spreadTransform = 14;\n\tpublic static readonly RULE_pickTransform = 15;\n\tpublic static readonly RULE_spreadPickTransform = 16;\n\tpublic static readonly RULE_key = 17;\n\tpublic static readonly RULE_queryName = 18;\n\tpublic static readonly RULE_paramName = 19;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"input\", \"query\", \"queryDef\", \"ignoredComment\", \"statement\", \"statementBody\",\n\t\t\"word\", \"range\", \"param\", \"paramId\", \"nameTag\", \"paramTag\", \"paramTransform\",\n\t\t\"transformRule\", \"spreadTransform\", \"pickTransform\", \"spreadPickTransform\",\n\t\t\"key\", \"queryName\", \"paramName\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, undefined, \"'/*'\", undefined, undefined, \"';'\",\n\t\tundefined, undefined, undefined, \"':'\", undefined, \"'->'\", \"'...'\", \"'@name'\",\n\t\t\"'@param'\", \"'('\", \"')'\", \"','\", undefined, undefined, \"'*/'\", \"'$'\",\n\t\t\"'::'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"ID\", \"LINE_COMMENT\", \"OPEN_COMMENT\", \"S_REQUIRED_MARK\", \"WORD\",\n\t\t\"EOF_STATEMENT\", \"WSL\", \"STRING\", \"DOLLAR_STRING\", \"PARAM_MARK\", \"WS\",\n\t\t\"TRANSFORM_ARROW\", \"SPREAD\", \"NAME_TAG\", \"TYPE_TAG\", \"OB\", \"CB\", \"COMMA\",\n\t\t\"C_REQUIRED_MARK\", \"ANY\", \"CLOSE_COMMENT\", \"DOLLAR\", \"CAST\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SQLParser._LITERAL_NAMES, SQLParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SQLParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SQLParser.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SQLParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SQLParser._serializedATN; }\n\n\tprotected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {\n\t\treturn new FailedPredicateException(this, predicate, message);\n\t}\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(SQLParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic input(): InputContext {\n\t\tlet _localctx: InputContext = new InputContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, SQLParser.RULE_input);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tlet _alt: number;\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 47;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tdo {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tthis.state = 43;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);\n\t\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\n\t\t\t\t\tif (_alt === 1) {\n\t\t\t\t\t\t{\n\t\t\t\t\t\t{\n\t\t\t\t\t\tthis.state = 40;\n\t\t\t\t\t\tthis.ignoredComment();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.state = 45;\n\t\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);\n\t\t\t\t}\n\t\t\t\tthis.state = 46;\n\t\t\t\tthis.query();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 49;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t} while (_la === SQLParser.OPEN_COMMENT);\n\t\t\tthis.state = 51;\n\t\t\tthis.match(SQLParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic query(): QueryContext {\n\t\tlet _localctx: QueryContext = new QueryContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, SQLParser.RULE_query);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 53;\n\t\t\tthis.queryDef();\n\t\t\tthis.state = 54;\n\t\t\tthis.statement();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic queryDef(): QueryDefContext {\n\t\tlet _localctx: QueryDefContext = new QueryDefContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, SQLParser.RULE_queryDef);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 56;\n\t\t\tthis.match(SQLParser.OPEN_COMMENT);\n\t\t\tthis.state = 57;\n\t\t\tthis.nameTag();\n\t\t\tthis.state = 61;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\twhile (_la === SQLParser.TYPE_TAG) {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tthis.state = 58;\n\t\t\t\tthis.paramTag();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 63;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t}\n\t\t\tthis.state = 64;\n\t\t\tthis.match(SQLParser.CLOSE_COMMENT);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic ignoredComment(): IgnoredCommentContext {\n\t\tlet _localctx: IgnoredCommentContext = new IgnoredCommentContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, SQLParser.RULE_ignoredComment);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 66;\n\t\t\tthis.match(SQLParser.OPEN_COMMENT);\n\t\t\tthis.state = 70;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\twhile ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SQLParser.ID) | (1 << SQLParser.LINE_COMMENT) | (1 << SQLParser.OPEN_COMMENT) | (1 << SQLParser.S_REQUIRED_MARK) | (1 << SQLParser.WORD) | (1 << SQLParser.EOF_STATEMENT) | (1 << SQLParser.WSL) | (1 << SQLParser.STRING) | (1 << SQLParser.DOLLAR_STRING) | (1 << SQLParser.PARAM_MARK) | (1 << SQLParser.WS) | (1 << SQLParser.TRANSFORM_ARROW) | (1 << SQLParser.SPREAD) | (1 << SQLParser.NAME_TAG) | (1 << SQLParser.TYPE_TAG) | (1 << SQLParser.OB) | (1 << SQLParser.CB) | (1 << SQLParser.COMMA) | (1 << SQLParser.C_REQUIRED_MARK) | (1 << SQLParser.ANY) | (1 << SQLParser.DOLLAR) | (1 << SQLParser.CAST))) !== 0)) {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tthis.state = 67;\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t\tif (_la <= 0 || (_la === SQLParser.CLOSE_COMMENT)) {\n\t\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t\t} else {\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\t\tthis.consume();\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 72;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t}\n\t\t\tthis.state = 73;\n\t\t\tthis.match(SQLParser.CLOSE_COMMENT);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic statement(): StatementContext {\n\t\tlet _localctx: StatementContext = new StatementContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 8, SQLParser.RULE_statement);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 75;\n\t\t\tthis.statementBody();\n\t\t\tthis.state = 76;\n\t\t\tthis.match(SQLParser.EOF_STATEMENT);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic statementBody(): StatementBodyContext {\n\t\tlet _localctx: StatementBodyContext = new StatementBodyContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 10, SQLParser.RULE_statementBody);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 85;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\twhile ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SQLParser.ID) | (1 << SQLParser.LINE_COMMENT) | (1 << SQLParser.OPEN_COMMENT) | (1 << SQLParser.S_REQUIRED_MARK) | (1 << SQLParser.WORD) | (1 << SQLParser.STRING) | (1 << SQLParser.DOLLAR_STRING) | (1 << SQLParser.PARAM_MARK))) !== 0)) {\n\t\t\t\t{\n\t\t\t\tthis.state = 83;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {\n\t\t\t\tcase 1:\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 78;\n\t\t\t\t\tthis.match(SQLParser.LINE_COMMENT);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 79;\n\t\t\t\t\tthis.ignoredComment();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 80;\n\t\t\t\t\tthis.param();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 81;\n\t\t\t\t\tthis.word();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 82;\n\t\t\t\t\tthis.range();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 87;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_la = this._input.LA(1);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic word(): WordContext {\n\t\tlet _localctx: WordContext = new WordContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 12, SQLParser.RULE_word);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 88;\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SQLParser.ID) | (1 << SQLParser.S_REQUIRED_MARK) | (1 << SQLParser.WORD) | (1 << SQLParser.STRING) | (1 << SQLParser.DOLLAR_STRING))) !== 0))) {\n\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t} else {\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t}\n\n\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\tthis.consume();\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic range(): RangeContext {\n\t\tlet _localctx: RangeContext = new RangeContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 14, SQLParser.RULE_range);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 90;\n\t\t\tthis.match(SQLParser.PARAM_MARK);\n\t\t\tthis.state = 91;\n\t\t\tthis.word();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic param(): ParamContext {\n\t\tlet _localctx: ParamContext = new ParamContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 16, SQLParser.RULE_param);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 93;\n\t\t\tthis.match(SQLParser.PARAM_MARK);\n\t\t\tthis.state = 94;\n\t\t\tthis.paramId();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic paramId(): ParamIdContext {\n\t\tlet _localctx: ParamIdContext = new ParamIdContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 18, SQLParser.RULE_paramId);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 96;\n\t\t\tthis.match(SQLParser.ID);\n\t\t\tthis.state = 98;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\tthis.state = 97;\n\t\t\t\tthis.match(SQLParser.S_REQUIRED_MARK);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic nameTag(): NameTagContext {\n\t\tlet _localctx: NameTagContext = new NameTagContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 20, SQLParser.RULE_nameTag);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 100;\n\t\t\tthis.match(SQLParser.NAME_TAG);\n\t\t\tthis.state = 101;\n\t\t\tthis.queryName();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic paramTag(): ParamTagContext {\n\t\tlet _localctx: ParamTagContext = new ParamTagContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 22, SQLParser.RULE_paramTag);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 103;\n\t\t\tthis.match(SQLParser.TYPE_TAG);\n\t\t\tthis.state = 104;\n\t\t\tthis.paramName();\n\t\t\tthis.state = 105;\n\t\t\tthis.paramTransform();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic paramTransform(): ParamTransformContext {\n\t\tlet _localctx: ParamTransformContext = new ParamTransformContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 24, SQLParser.RULE_paramTransform);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 107;\n\t\t\tthis.match(SQLParser.TRANSFORM_ARROW);\n\t\t\tthis.state = 108;\n\t\t\tthis.transformRule();\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic transformRule(): TransformRuleContext {\n\t\tlet _localctx: TransformRuleContext = new TransformRuleContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 26, SQLParser.RULE_transformRule);\n\t\ttry {\n\t\t\tthis.state = 113;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 110;\n\t\t\t\tthis.spreadTransform();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 111;\n\t\t\t\tthis.pickTransform();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 112;\n\t\t\t\tthis.spreadPickTransform();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic spreadTransform(): SpreadTransformContext {\n\t\tlet _localctx: SpreadTransformContext = new SpreadTransformContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 28, SQLParser.RULE_spreadTransform);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 115;\n\t\t\tthis.match(SQLParser.OB);\n\t\t\tthis.state = 116;\n\t\t\tthis.match(SQLParser.SPREAD);\n\t\t\tthis.state = 117;\n\t\t\tthis.match(SQLParser.CB);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic pickTransform(): PickTransformContext {\n\t\tlet _localctx: PickTransformContext = new PickTransformContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 30, SQLParser.RULE_pickTransform);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tlet _alt: number;\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 119;\n\t\t\tthis.match(SQLParser.OB);\n\t\t\tthis.state = 120;\n\t\t\tthis.key();\n\t\t\tthis.state = 125;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);\n\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\n\t\t\t\tif (_alt === 1) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tthis.state = 121;\n\t\t\t\t\tthis.match(SQLParser.COMMA);\n\t\t\t\t\tthis.state = 122;\n\t\t\t\t\tthis.key();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state = 127;\n\t\t\t\tthis._errHandler.sync(this);\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);\n\t\t\t}\n\t\t\tthis.state = 129;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === SQLParser.COMMA) {\n\t\t\t\t{\n\t\t\t\tthis.state = 128;\n\t\t\t\tthis.match(SQLParser.COMMA);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state = 131;\n\t\t\tthis.match(SQLParser.CB);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic spreadPickTransform(): SpreadPickTransformContext {\n\t\tlet _localctx: SpreadPickTransformContext = new SpreadPickTransformContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 32, SQLParser.RULE_spreadPickTransform);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 133;\n\t\t\tthis.match(SQLParser.OB);\n\t\t\tthis.state = 134;\n\t\t\tthis.pickTransform();\n\t\t\tthis.state = 135;\n\t\t\tthis.match(SQLParser.SPREAD);\n\t\t\tthis.state = 136;\n\t\t\tthis.match(SQLParser.CB);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic key(): KeyContext {\n\t\tlet _localctx: KeyContext = new KeyContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 34, SQLParser.RULE_key);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 138;\n\t\t\tthis.match(SQLParser.ID);\n\t\t\tthis.state = 140;\n\t\t\tthis._errHandler.sync(this);\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (_la === SQLParser.C_REQUIRED_MARK) {\n\t\t\t\t{\n\t\t\t\tthis.state = 139;\n\t\t\t\tthis.match(SQLParser.C_REQUIRED_MARK);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic queryName(): QueryNameContext {\n\t\tlet _localctx: QueryNameContext = new QueryNameContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 36, SQLParser.RULE_queryName);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 142;\n\t\t\tthis.match(SQLParser.ID);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic paramName(): ParamNameContext {\n\t\tlet _localctx: ParamNameContext = new ParamNameContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 38, SQLParser.RULE_paramName);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 144;\n\t\t\tthis.match(SQLParser.ID);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x19\\x95\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n\t\t\"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\\x04\" +\n\t\t\"\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\" +\n\t\t\"\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x03\\x02\\x07\\x02,\\n\\x02\\f\\x02\\x0E\" +\n\t\t\"\\x02/\\v\\x02\\x03\\x02\\x06\\x022\\n\\x02\\r\\x02\\x0E\\x023\\x03\\x02\\x03\\x02\\x03\" +\n\t\t\"\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x07\\x04>\\n\\x04\\f\\x04\\x0E\" +\n\t\t\"\\x04A\\v\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05\\x07\\x05G\\n\\x05\\f\\x05\\x0E\\x05\" +\n\t\t\"J\\v\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\" +\n\t\t\"\\x03\\x07\\x03\\x07\\x07\\x07V\\n\\x07\\f\\x07\\x0E\\x07Y\\v\\x07\\x03\\b\\x03\\b\\x03\\t\" +\n\t\t\"\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x05\\ve\\n\\v\\x03\\f\\x03\\f\\x03\" +\n\t\t\"\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\" +\n\t\t\"\\x0F\\x05\\x0Ft\\n\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\" +\n\t\t\"\\x11\\x03\\x11\\x07\\x11~\\n\\x11\\f\\x11\\x0E\\x11\\x81\\v\\x11\\x03\\x11\\x05\\x11\\x84\" +\n\t\t\"\\n\\x11\\x03\\x11\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\" +\n\t\t\"\\x03\\x13\\x05\\x13\\x8F\\n\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x02\" +\n\t\t\"\\x02\\x02\\x16\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x0E\\x02\\x10\\x02\" +\n\t\t\"\\x12\\x02\\x14\\x02\\x16\\x02\\x18\\x02\\x1A\\x02\\x1C\\x02\\x1E\\x02 \\x02\\\"\\x02$\\x02\" +\n\t\t\"&\\x02(\\x02\\x02\\x04\\x03\\x02\\x17\\x17\\x05\\x02\\x03\\x03\\x06\\x07\\n\\v\\x02\\x8F\" +\n\t\t\"\\x021\\x03\\x02\\x02\\x02\\x047\\x03\\x02\\x02\\x02\\x06:\\x03\\x02\\x02\\x02\\bD\\x03\" +\n\t\t\"\\x02\\x02\\x02\\nM\\x03\\x02\\x02\\x02\\fW\\x03\\x02\\x02\\x02\\x0EZ\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x10\\\\\\x03\\x02\\x02\\x02\\x12_\\x03\\x02\\x02\\x02\\x14b\\x03\\x02\\x02\\x02\\x16f\" +\n\t\t\"\\x03\\x02\\x02\\x02\\x18i\\x03\\x02\\x02\\x02\\x1Am\\x03\\x02\\x02\\x02\\x1Cs\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x1Eu\\x03\\x02\\x02\\x02 y\\x03\\x02\\x02\\x02\\\"\\x87\\x03\\x02\\x02\\x02\" +\n\t\t\"$\\x8C\\x03\\x02\\x02\\x02&\\x90\\x03\\x02\\x02\\x02(\\x92\\x03\\x02\\x02\\x02*,\\x05\" +\n\t\t\"\\b\\x05\\x02+*\\x03\\x02\\x02\\x02,/\\x03\\x02\\x02\\x02-+\\x03\\x02\\x02\\x02-.\\x03\" +\n\t\t\"\\x02\\x02\\x02.0\\x03\\x02\\x02\\x02/-\\x03\\x02\\x02\\x0202\\x05\\x04\\x03\\x021-\\x03\" +\n\t\t\"\\x02\\x02\\x0223\\x03\\x02\\x02\\x0231\\x03\\x02\\x02\\x0234\\x03\\x02\\x02\\x0245\\x03\" +\n\t\t\"\\x02\\x02\\x0256\\x07\\x02\\x02\\x036\\x03\\x03\\x02\\x02\\x0278\\x05\\x06\\x04\\x02\" +\n\t\t\"89\\x05\\n\\x06\\x029\\x05\\x03\\x02\\x02\\x02:;\\x07\\x05\\x02\\x02;?\\x05\\x16\\f\\x02\" +\n\t\t\"<>\\x05\\x18\\r\\x02=<\\x03\\x02\\x02\\x02>A\\x03\\x02\\x02\\x02?=\\x03\\x02\\x02\\x02\" +\n\t\t\"?@\\x03\\x02\\x02\\x02@B\\x03\\x02\\x02\\x02A?\\x03\\x02\\x02\\x02BC\\x07\\x17\\x02\\x02\" +\n\t\t\"C\\x07\\x03\\x02\\x02\\x02DH\\x07\\x05\\x02\\x02EG\\n\\x02\\x02\\x02FE\\x03\\x02\\x02\" +\n\t\t\"\\x02GJ\\x03\\x02\\x02\\x02HF\\x03\\x02\\x02\\x02HI\\x03\\x02\\x02\\x02IK\\x03\\x02\\x02\" +\n\t\t\"\\x02JH\\x03\\x02\\x02\\x02KL\\x07\\x17\\x02\\x02L\\t\\x03\\x02\\x02\\x02MN\\x05\\f\\x07\" +\n\t\t\"\\x02NO\\x07\\b\\x02\\x02O\\v\\x03\\x02\\x02\\x02PV\\x07\\x04\\x02\\x02QV\\x05\\b\\x05\" +\n\t\t\"\\x02RV\\x05\\x12\\n\\x02SV\\x05\\x0E\\b\\x02TV\\x05\\x10\\t\\x02UP\\x03\\x02\\x02\\x02\" +\n\t\t\"UQ\\x03\\x02\\x02\\x02UR\\x03\\x02\\x02\\x02US\\x03\\x02\\x02\\x02UT\\x03\\x02\\x02\\x02\" +\n\t\t\"VY\\x03\\x02\\x02\\x02WU\\x03\\x02\\x02\\x02WX\\x03\\x02\\x02\\x02X\\r\\x03\\x02\\x02\" +\n\t\t\"\\x02YW\\x03\\x02\\x02\\x02Z[\\t\\x03\\x02\\x02[\\x0F\\x03\\x02\\x02\\x02\\\\]\\x07\\f\\x02\" +\n\t\t\"\\x02]^\\x05\\x0E\\b\\x02^\\x11\\x03\\x02\\x02\\x02_`\\x07\\f\\x02\\x02`a\\x05\\x14\\v\" +\n\t\t\"\\x02a\\x13\\x03\\x02\\x02\\x02bd\\x07\\x03\\x02\\x02ce\\x07\\x06\\x02\\x02dc\\x03\\x02\" +\n\t\t\"\\x02\\x02de\\x03\\x02\\x02\\x02e\\x15\\x03\\x02\\x02\\x02fg\\x07\\x10\\x02\\x02gh\\x05\" +\n\t\t\"&\\x14\\x02h\\x17\\x03\\x02\\x02\\x02ij\\x07\\x11\\x02\\x02jk\\x05(\\x15\\x02kl\\x05\" +\n\t\t\"\\x1A\\x0E\\x02l\\x19\\x03\\x02\\x02\\x02mn\\x07\\x0E\\x02\\x02no\\x05\\x1C\\x0F\\x02\" +\n\t\t\"o\\x1B\\x03\\x02\\x02\\x02pt\\x05\\x1E\\x10\\x02qt\\x05 \\x11\\x02rt\\x05\\\"\\x12\\x02\" +\n\t\t\"sp\\x03\\x02\\x02\\x02sq\\x03\\x02\\x02\\x02sr\\x03\\x02\\x02\\x02t\\x1D\\x03\\x02\\x02\" +\n\t\t\"\\x02uv\\x07\\x12\\x02\\x02vw\\x07\\x0F\\x02\\x02wx\\x07\\x13\\x02\\x02x\\x1F\\x03\\x02\" +\n\t\t\"\\x02\\x02yz\\x07\\x12\\x02\\x02z\\x7F\\x05$\\x13\\x02{|\\x07\\x14\\x02\\x02|~\\x05$\" +\n\t\t\"\\x13\\x02}{\\x03\\x02\\x02\\x02~\\x81\\x03\\x02\\x02\\x02\\x7F}\\x03\\x02\\x02\\x02\\x7F\" +\n\t\t\"\\x80\\x03\\x02\\x02\\x02\\x80\\x83\\x03\\x02\\x02\\x02\\x81\\x7F\\x03\\x02\\x02\\x02\\x82\" +\n\t\t\"\\x84\\x07\\x14\\x02\\x02\\x83\\x82\\x03\\x02\\x02\\x02\\x83\\x84\\x03\\x02\\x02\\x02\\x84\" +\n\t\t\"\\x85\\x03\\x02\\x02\\x02\\x85\\x86\\x07\\x13\\x02\\x02\\x86!\\x03\\x02\\x02\\x02\\x87\" +\n\t\t\"\\x88\\x07\\x12\\x02\\x02\\x88\\x89\\x05 \\x11\\x02\\x89\\x8A\\x07\\x0F\\x02\\x02\\x8A\" +\n\t\t\"\\x8B\\x07\\x13\\x02\\x02\\x8B#\\x03\\x02\\x02\\x02\\x8C\\x8E\\x07\\x03\\x02\\x02\\x8D\" +\n\t\t\"\\x8F\\x07\\x15\\x02\\x02\\x8E\\x8D\\x03\\x02\\x02\\x02\\x8E\\x8F\\x03\\x02\\x02\\x02\\x8F\" +\n\t\t\"%\\x03\\x02\\x02\\x02\\x90\\x91\\x07\\x03\\x02\\x02\\x91\\'\\x03\\x02\\x02\\x02\\x92\\x93\" +\n\t\t\"\\x07\\x03\\x02\\x02\\x93)\\x03\\x02\\x02\\x02\\r-3?HUWds\\x7F\\x83\\x8E\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SQLParser.__ATN) {\n\t\t\tSQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SQLParser._serializedATN));\n\t\t}\n\n\t\treturn SQLParser.__ATN;\n\t}\n\n}\n\nexport class InputContext extends ParserRuleContext {\n\tpublic EOF(): TerminalNode { return this.getToken(SQLParser.EOF, 0); }\n\tpublic query(): QueryContext[];\n\tpublic query(i: number): QueryContext;\n\tpublic query(i?: number): QueryContext | QueryContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(QueryContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, QueryContext);\n\t\t}\n\t}\n\tpublic ignoredComment(): IgnoredCommentContext[];\n\tpublic ignoredComment(i: number): IgnoredCommentContext;\n\tpublic ignoredComment(i?: number): IgnoredCommentContext | IgnoredCommentContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(IgnoredCommentContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, IgnoredCommentContext);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_input; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterInput) {\n\t\t\tlistener.enterInput(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitInput) {\n\t\t\tlistener.exitInput(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitInput) {\n\t\t\treturn visitor.visitInput(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class QueryContext extends ParserRuleContext {\n\tpublic queryDef(): QueryDefContext {\n\t\treturn this.getRuleContext(0, QueryDefContext);\n\t}\n\tpublic statement(): StatementContext {\n\t\treturn this.getRuleContext(0, StatementContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_query; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterQuery) {\n\t\t\tlistener.enterQuery(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitQuery) {\n\t\t\tlistener.exitQuery(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitQuery) {\n\t\t\treturn visitor.visitQuery(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class QueryDefContext extends ParserRuleContext {\n\tpublic OPEN_COMMENT(): TerminalNode { return this.getToken(SQLParser.OPEN_COMMENT, 0); }\n\tpublic nameTag(): NameTagContext {\n\t\treturn this.getRuleContext(0, NameTagContext);\n\t}\n\tpublic CLOSE_COMMENT(): TerminalNode { return this.getToken(SQLParser.CLOSE_COMMENT, 0); }\n\tpublic paramTag(): ParamTagContext[];\n\tpublic paramTag(i: number): ParamTagContext;\n\tpublic paramTag(i?: number): ParamTagContext | ParamTagContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(ParamTagContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, ParamTagContext);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_queryDef; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterQueryDef) {\n\t\t\tlistener.enterQueryDef(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitQueryDef) {\n\t\t\tlistener.exitQueryDef(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitQueryDef) {\n\t\t\treturn visitor.visitQueryDef(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class IgnoredCommentContext extends ParserRuleContext {\n\tpublic OPEN_COMMENT(): TerminalNode { return this.getToken(SQLParser.OPEN_COMMENT, 0); }\n\tpublic CLOSE_COMMENT(): TerminalNode[];\n\tpublic CLOSE_COMMENT(i: number): TerminalNode;\n\tpublic CLOSE_COMMENT(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(SQLParser.CLOSE_COMMENT);\n\t\t} else {\n\t\t\treturn this.getToken(SQLParser.CLOSE_COMMENT, i);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_ignoredComment; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterIgnoredComment) {\n\t\t\tlistener.enterIgnoredComment(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitIgnoredComment) {\n\t\t\tlistener.exitIgnoredComment(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitIgnoredComment) {\n\t\t\treturn visitor.visitIgnoredComment(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class StatementContext extends ParserRuleContext {\n\tpublic statementBody(): StatementBodyContext {\n\t\treturn this.getRuleContext(0, StatementBodyContext);\n\t}\n\tpublic EOF_STATEMENT(): TerminalNode { return this.getToken(SQLParser.EOF_STATEMENT, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_statement; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterStatement) {\n\t\t\tlistener.enterStatement(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitStatement) {\n\t\t\tlistener.exitStatement(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitStatement) {\n\t\t\treturn visitor.visitStatement(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class StatementBodyContext extends ParserRuleContext {\n\tpublic LINE_COMMENT(): TerminalNode[];\n\tpublic LINE_COMMENT(i: number): TerminalNode;\n\tpublic LINE_COMMENT(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(SQLParser.LINE_COMMENT);\n\t\t} else {\n\t\t\treturn this.getToken(SQLParser.LINE_COMMENT, i);\n\t\t}\n\t}\n\tpublic ignoredComment(): IgnoredCommentContext[];\n\tpublic ignoredComment(i: number): IgnoredCommentContext;\n\tpublic ignoredComment(i?: number): IgnoredCommentContext | IgnoredCommentContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(IgnoredCommentContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, IgnoredCommentContext);\n\t\t}\n\t}\n\tpublic param(): ParamContext[];\n\tpublic param(i: number): ParamContext;\n\tpublic param(i?: number): ParamContext | ParamContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(ParamContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, ParamContext);\n\t\t}\n\t}\n\tpublic word(): WordContext[];\n\tpublic word(i: number): WordContext;\n\tpublic word(i?: number): WordContext | WordContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(WordContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, WordContext);\n\t\t}\n\t}\n\tpublic range(): RangeContext[];\n\tpublic range(i: number): RangeContext;\n\tpublic range(i?: number): RangeContext | RangeContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(RangeContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, RangeContext);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_statementBody; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterStatementBody) {\n\t\t\tlistener.enterStatementBody(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitStatementBody) {\n\t\t\tlistener.exitStatementBody(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitStatementBody) {\n\t\t\treturn visitor.visitStatementBody(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class WordContext extends ParserRuleContext {\n\tpublic WORD(): TerminalNode | undefined { return this.tryGetToken(SQLParser.WORD, 0); }\n\tpublic ID(): TerminalNode | undefined { return this.tryGetToken(SQLParser.ID, 0); }\n\tpublic STRING(): TerminalNode | undefined { return this.tryGetToken(SQLParser.STRING, 0); }\n\tpublic S_REQUIRED_MARK(): TerminalNode | undefined { return this.tryGetToken(SQLParser.S_REQUIRED_MARK, 0); }\n\tpublic DOLLAR_STRING(): TerminalNode | undefined { return this.tryGetToken(SQLParser.DOLLAR_STRING, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_word; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterWord) {\n\t\t\tlistener.enterWord(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitWord) {\n\t\t\tlistener.exitWord(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitWord) {\n\t\t\treturn visitor.visitWord(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class RangeContext extends ParserRuleContext {\n\tpublic PARAM_MARK(): TerminalNode { return this.getToken(SQLParser.PARAM_MARK, 0); }\n\tpublic word(): WordContext {\n\t\treturn this.getRuleContext(0, WordContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_range; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterRange) {\n\t\t\tlistener.enterRange(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitRange) {\n\t\t\tlistener.exitRange(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitRange) {\n\t\t\treturn visitor.visitRange(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamContext extends ParserRuleContext {\n\tpublic PARAM_MARK(): TerminalNode { return this.getToken(SQLParser.PARAM_MARK, 0); }\n\tpublic paramId(): ParamIdContext {\n\t\treturn this.getRuleContext(0, ParamIdContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_param; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterParam) {\n\t\t\tlistener.enterParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitParam) {\n\t\t\tlistener.exitParam(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitParam) {\n\t\t\treturn visitor.visitParam(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamIdContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(SQLParser.ID, 0); }\n\tpublic S_REQUIRED_MARK(): TerminalNode | undefined { return this.tryGetToken(SQLParser.S_REQUIRED_MARK, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_paramId; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterParamId) {\n\t\t\tlistener.enterParamId(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitParamId) {\n\t\t\tlistener.exitParamId(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitParamId) {\n\t\t\treturn visitor.visitParamId(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class NameTagContext extends ParserRuleContext {\n\tpublic NAME_TAG(): TerminalNode { return this.getToken(SQLParser.NAME_TAG, 0); }\n\tpublic queryName(): QueryNameContext {\n\t\treturn this.getRuleContext(0, QueryNameContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_nameTag; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterNameTag) {\n\t\t\tlistener.enterNameTag(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitNameTag) {\n\t\t\tlistener.exitNameTag(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitNameTag) {\n\t\t\treturn visitor.visitNameTag(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamTagContext extends ParserRuleContext {\n\tpublic TYPE_TAG(): TerminalNode { return this.getToken(SQLParser.TYPE_TAG, 0); }\n\tpublic paramName(): ParamNameContext {\n\t\treturn this.getRuleContext(0, ParamNameContext);\n\t}\n\tpublic paramTransform(): ParamTransformContext {\n\t\treturn this.getRuleContext(0, ParamTransformContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_paramTag; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterParamTag) {\n\t\t\tlistener.enterParamTag(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitParamTag) {\n\t\t\tlistener.exitParamTag(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitParamTag) {\n\t\t\treturn visitor.visitParamTag(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamTransformContext extends ParserRuleContext {\n\tpublic TRANSFORM_ARROW(): TerminalNode { return this.getToken(SQLParser.TRANSFORM_ARROW, 0); }\n\tpublic transformRule(): TransformRuleContext {\n\t\treturn this.getRuleContext(0, TransformRuleContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_paramTransform; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterParamTransform) {\n\t\t\tlistener.enterParamTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitParamTransform) {\n\t\t\tlistener.exitParamTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitParamTransform) {\n\t\t\treturn visitor.visitParamTransform(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class TransformRuleContext extends ParserRuleContext {\n\tpublic spreadTransform(): SpreadTransformContext | undefined {\n\t\treturn this.tryGetRuleContext(0, SpreadTransformContext);\n\t}\n\tpublic pickTransform(): PickTransformContext | undefined {\n\t\treturn this.tryGetRuleContext(0, PickTransformContext);\n\t}\n\tpublic spreadPickTransform(): SpreadPickTransformContext | undefined {\n\t\treturn this.tryGetRuleContext(0, SpreadPickTransformContext);\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_transformRule; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterTransformRule) {\n\t\t\tlistener.enterTransformRule(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitTransformRule) {\n\t\t\tlistener.exitTransformRule(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitTransformRule) {\n\t\t\treturn visitor.visitTransformRule(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class SpreadTransformContext extends ParserRuleContext {\n\tpublic OB(): TerminalNode { return this.getToken(SQLParser.OB, 0); }\n\tpublic SPREAD(): TerminalNode { return this.getToken(SQLParser.SPREAD, 0); }\n\tpublic CB(): TerminalNode { return this.getToken(SQLParser.CB, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_spreadTransform; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterSpreadTransform) {\n\t\t\tlistener.enterSpreadTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitSpreadTransform) {\n\t\t\tlistener.exitSpreadTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitSpreadTransform) {\n\t\t\treturn visitor.visitSpreadTransform(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class PickTransformContext extends ParserRuleContext {\n\tpublic OB(): TerminalNode { return this.getToken(SQLParser.OB, 0); }\n\tpublic key(): KeyContext[];\n\tpublic key(i: number): KeyContext;\n\tpublic key(i?: number): KeyContext | KeyContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(KeyContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, KeyContext);\n\t\t}\n\t}\n\tpublic CB(): TerminalNode { return this.getToken(SQLParser.CB, 0); }\n\tpublic COMMA(): TerminalNode[];\n\tpublic COMMA(i: number): TerminalNode;\n\tpublic COMMA(i?: number): TerminalNode | TerminalNode[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getTokens(SQLParser.COMMA);\n\t\t} else {\n\t\t\treturn this.getToken(SQLParser.COMMA, i);\n\t\t}\n\t}\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_pickTransform; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterPickTransform) {\n\t\t\tlistener.enterPickTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitPickTransform) {\n\t\t\tlistener.exitPickTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitPickTransform) {\n\t\t\treturn visitor.visitPickTransform(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class SpreadPickTransformContext extends ParserRuleContext {\n\tpublic OB(): TerminalNode { return this.getToken(SQLParser.OB, 0); }\n\tpublic pickTransform(): PickTransformContext {\n\t\treturn this.getRuleContext(0, PickTransformContext);\n\t}\n\tpublic SPREAD(): TerminalNode { return this.getToken(SQLParser.SPREAD, 0); }\n\tpublic CB(): TerminalNode { return this.getToken(SQLParser.CB, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_spreadPickTransform; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterSpreadPickTransform) {\n\t\t\tlistener.enterSpreadPickTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitSpreadPickTransform) {\n\t\t\tlistener.exitSpreadPickTransform(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitSpreadPickTransform) {\n\t\t\treturn visitor.visitSpreadPickTransform(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class KeyContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(SQLParser.ID, 0); }\n\tpublic C_REQUIRED_MARK(): TerminalNode | undefined { return this.tryGetToken(SQLParser.C_REQUIRED_MARK, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_key; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterKey) {\n\t\t\tlistener.enterKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitKey) {\n\t\t\tlistener.exitKey(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitKey) {\n\t\t\treturn visitor.visitKey(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class QueryNameContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(SQLParser.ID, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_queryName; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterQueryName) {\n\t\t\tlistener.enterQueryName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitQueryName) {\n\t\t\tlistener.exitQueryName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitQueryName) {\n\t\t\treturn visitor.visitQueryName(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ParamNameContext extends ParserRuleContext {\n\tpublic ID(): TerminalNode { return this.getToken(SQLParser.ID, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SQLParser.RULE_paramName; }\n\t// @Override\n\tpublic enterRule(listener: SQLParserListener): void {\n\t\tif (listener.enterParamName) {\n\t\t\tlistener.enterParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SQLParserListener): void {\n\t\tif (listener.exitParamName) {\n\t\t\tlistener.exitParamName(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SQLParserVisitor<Result>): Result {\n\t\tif (visitor.visitParamName) {\n\t\t\treturn visitor.visitParamName(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n", "import { TSQueryAST, assert } from '@pgtyped/parser';\nimport { Param, ParamKey, ParamType } from '@pgtyped/parser';\nimport {\n  DictArrayParameter,\n  DictParameter,\n  InterpolatedQuery,\n  NestedParameters,\n  QueryParameters,\n  ScalarArrayParameter,\n  ScalarParameter,\n  ParameterTransform,\n  QueryParameter,\n  replaceIntervals,\n  Scalar,\n} from './preprocessor.js';\n\nfunction processScalar(\n  { name, required }: Param,\n  nextIndex: number,\n  existingConfig?: ScalarParameter,\n  parameters?: QueryParameters,\n): {\n  replacement: string;\n  bindings: Scalar[];\n  nextIndex: number;\n  config: ScalarParameter;\n} {\n  let index = nextIndex;\n  const bindings = [];\n  let replacement;\n  let config = existingConfig;\n  if (config) {\n    replacement = `$${config.assignedIndex}`;\n  } else {\n    const assignedIndex = ++index;\n    replacement = `$${assignedIndex}`;\n    config = {\n      assignedIndex,\n      type: ParameterTransform.Scalar,\n      name,\n      required,\n    };\n\n    if (parameters) {\n      const value = parameters[name] as Scalar;\n      bindings.push(value);\n    }\n  }\n  return { bindings, replacement, nextIndex: index, config };\n}\n\nfunction processScalarArray(\n  { name, required }: Param,\n  nextIndex: number,\n  existingConfig?: ScalarArrayParameter,\n  parameters?: QueryParameters,\n): {\n  replacement: string;\n  bindings: Scalar[];\n  nextIndex: number;\n  config: ScalarArrayParameter;\n} {\n  let index = nextIndex;\n  const bindings: Scalar[] = [];\n  let config = existingConfig;\n\n  let assignedIndex: number[] = [];\n  if (config) {\n    assignedIndex = config.assignedIndex as number[];\n  } else {\n    if (parameters) {\n      const values = parameters[name] as Scalar[];\n      assignedIndex = values.map((val) => {\n        bindings.push(val);\n        return ++index;\n      });\n    } else {\n      assignedIndex = [++index];\n    }\n    config = {\n      assignedIndex,\n      type: ParameterTransform.Spread,\n      name,\n      required,\n    };\n  }\n  const replacement = '(' + assignedIndex.map((v) => `$${v}`).join(', ') + ')';\n\n  return { bindings, replacement, nextIndex: index, config };\n}\n\nfunction processObject(\n  paramName: string,\n  keys: ParamKey[],\n  nextIndex: number,\n  existingConfig?: DictParameter,\n  parameters?: QueryParameters,\n): {\n  replacement: string;\n  bindings: Scalar[];\n  nextIndex: number;\n  config: DictParameter;\n} {\n  let index = nextIndex;\n  const bindings: Scalar[] = [];\n  const config =\n    existingConfig ||\n    ({\n      name: paramName,\n      type: ParameterTransform.Pick,\n      dict: {},\n    } as DictParameter);\n\n  const keyIndices = keys.map(({ name, required }) => {\n    if (name in config.dict) {\n      config.dict[name].required = config.dict[name].required || required;\n      // reuse index if parameter was seen before\n      return `$${config.dict[name].assignedIndex}`;\n    }\n\n    const assignedIndex = ++index;\n    config.dict[name] = {\n      assignedIndex,\n      name,\n      required,\n      type: ParameterTransform.Scalar,\n    };\n    if (parameters) {\n      const value = (parameters[paramName] as NestedParameters)[name];\n      bindings.push(value);\n    }\n    return `$${assignedIndex}`;\n  });\n  const replacement = '(' + keyIndices.join(', ') + ')';\n\n  return { bindings, replacement, nextIndex: index, config };\n}\n\nfunction processObjectArray(\n  paramName: string,\n  keys: ParamKey[],\n  nextIndex: number,\n  existingConfig?: DictArrayParameter,\n  parameters?: QueryParameters,\n): {\n  replacement: string;\n  bindings: Scalar[];\n  nextIndex: number;\n  config: DictArrayParameter;\n} {\n  let index = nextIndex;\n  const bindings: Scalar[] = [];\n  const config =\n    existingConfig ||\n    ({\n      name: paramName,\n      type: ParameterTransform.PickSpread,\n      dict: {},\n    } as DictArrayParameter);\n\n  let replacement;\n  if (parameters) {\n    const values = parameters[paramName] as NestedParameters[];\n    if (values.length > 0) {\n      replacement = values\n        .map((val) =>\n          keys\n            .map(({ name }) => {\n              bindings.push(val[name]);\n              return `$${++index}`;\n            })\n            .join(', '),\n        )\n        .map((pk) => `(${pk})`)\n        .join(', ');\n    } else {\n      // empty set for empty arrays\n      replacement = '()';\n    }\n  } else {\n    const keyIndices = keys.map(({ name, required }) => {\n      if (name in config.dict) {\n        // reuse index if parameter was seen before\n        return `$${config.dict[name].assignedIndex}`;\n      }\n\n      const assignedIndex = ++index;\n      config.dict[name] = {\n        assignedIndex,\n        name,\n        required,\n        type: ParameterTransform.Scalar,\n      };\n      return `$${assignedIndex}`;\n    });\n    replacement = '(' + keyIndices.join(', ') + ')';\n  }\n\n  return { bindings, replacement, nextIndex: index, config };\n}\n\n/* Processes query strings produced by old parser from SQL-in-TS statements */\nexport const processTSQueryAST = (\n  query: TSQueryAST,\n  parameters?: QueryParameters,\n): InterpolatedQuery => {\n  const bindings: Scalar[] = [];\n  const baseMap: { [param: string]: QueryParameter } = {};\n  let i = 0;\n  const intervals: { a: number; b: number; sub: string }[] = [];\n  for (const param of query.params) {\n    let sub: string;\n    let paramBindings: Scalar[] = [];\n    let config: QueryParameter;\n    let result;\n    if (param.selection.type === ParamType.Scalar) {\n      const prevConfig = baseMap[param.name] as ScalarParameter | undefined;\n      result = processScalar(param, i, prevConfig, parameters);\n    }\n    if (param.selection.type === ParamType.ScalarArray) {\n      const prevConfig = baseMap[param.name] as\n        | ScalarArrayParameter\n        | undefined;\n      result = processScalarArray(param, i, prevConfig, parameters);\n    }\n    if (param.selection.type === ParamType.Object) {\n      const prevConfig: DictParameter = (baseMap[\n        param.name\n      ] as DictParameter) || {\n        name: param.name,\n        type: ParameterTransform.Pick,\n        dict: {},\n      };\n      result = processObject(\n        param.name,\n        param.selection.keys,\n        i,\n        prevConfig,\n        parameters,\n      );\n    }\n    if (param.selection.type === ParamType.ObjectArray) {\n      const prevConfig: DictArrayParameter = (baseMap[\n        param.name\n      ] as DictArrayParameter) || {\n        name: param.name,\n        type: ParameterTransform.PickSpread,\n        dict: {},\n      };\n      result = processObjectArray(\n        param.name,\n        param.selection.keys,\n        i,\n        prevConfig,\n        parameters,\n      );\n    }\n    assert(result);\n    ({\n      config,\n      nextIndex: i,\n      replacement: sub,\n      bindings: paramBindings,\n    } = result);\n    baseMap[param.name] = config!;\n    bindings.push(...paramBindings);\n    intervals.push({ a: param.location.a, b: param.location.b, sub });\n  }\n  const flatStr = replaceIntervals(query.text, intervals);\n  return {\n    mapping: parameters ? [] : Object.values(baseMap),\n    query: flatStr,\n    bindings,\n  };\n};\n", "import { assert, SQLQueryIR, TransformType } from '@pgtyped/parser';\nimport {\n  InterpolatedQuery,\n  NestedParameters,\n  QueryParameters,\n  ScalarArrayParameter,\n  ScalarParameter,\n  ParameterTransform,\n  QueryParameter,\n  replaceIntervals,\n  Scalar,\n} from './preprocessor.js';\n\n/* Processes query AST formed by new parser from pure SQL files */\nexport const processSQLQueryIR = (\n  queryIR: SQLQueryIR,\n  passedParams?: QueryParameters,\n): InterpolatedQuery => {\n  const bindings: Scalar[] = [];\n  const paramMapping: QueryParameter[] = [];\n  const usedParams = queryIR.params.filter(\n    (p) => p.name in queryIR.usedParamSet,\n  );\n  let i = 1;\n  const intervals: { a: number; b: number; sub: string }[] = [];\n  for (const usedParam of usedParams) {\n    // Handle spread transform\n    if (usedParam.transform.type === TransformType.ArraySpread) {\n      let sub: string;\n      if (passedParams) {\n        const paramValue = passedParams[usedParam.name];\n        sub = (paramValue as Scalar[])\n          .map((val) => {\n            bindings.push(val);\n            return `$${i++}`;\n          })\n          .join(',');\n      } else {\n        const idx = i++;\n        paramMapping.push({\n          name: usedParam.name,\n          type: ParameterTransform.Spread,\n          assignedIndex: idx,\n          required: usedParam.required,\n        } as ScalarArrayParameter);\n        sub = `$${idx}`;\n      }\n      usedParam.locs.forEach((loc) =>\n        intervals.push({\n          ...loc,\n          sub: `(${sub})`,\n        }),\n      );\n      continue;\n    }\n\n    // Handle pick transform\n    if (usedParam.transform.type === TransformType.PickTuple) {\n      const dict: {\n        [key: string]: ScalarParameter;\n      } = {};\n      const sub = usedParam.transform.keys\n        .map(({ name, required }) => {\n          const idx = i++;\n          dict[name] = {\n            name,\n            required,\n            type: ParameterTransform.Scalar,\n            assignedIndex: idx,\n          } as ScalarParameter;\n          if (passedParams) {\n            const paramValue = passedParams[usedParam.name] as NestedParameters;\n            const val = paramValue[name];\n            bindings.push(val);\n          }\n          return `$${idx}`;\n        })\n        .join(',');\n      if (!passedParams) {\n        paramMapping.push({\n          name: usedParam.name,\n          type: ParameterTransform.Pick,\n          dict,\n        });\n      }\n\n      usedParam.locs.forEach((loc) =>\n        intervals.push({\n          ...loc,\n          sub: `(${sub})`,\n        }),\n      );\n      continue;\n    }\n\n    // Handle spreadPick transform\n    if (usedParam.transform.type === TransformType.PickArraySpread) {\n      let sub: string;\n      if (passedParams) {\n        const passedParam = passedParams[usedParam.name] as NestedParameters[];\n        sub = passedParam\n          .map((entity) => {\n            assert(usedParam.transform.type === TransformType.PickArraySpread);\n            const ssub = usedParam.transform.keys\n              .map(({ name }) => {\n                const val = entity[name];\n                bindings.push(val);\n                return `$${i++}`;\n              })\n              .join(',');\n            return ssub;\n          })\n          .join('),(');\n      } else {\n        const dict: {\n          [key: string]: ScalarParameter;\n        } = {};\n        sub = usedParam.transform.keys\n          .map(({ name, required }) => {\n            const idx = i++;\n            dict[name] = {\n              name,\n              required,\n              type: ParameterTransform.Scalar,\n              assignedIndex: idx,\n            } as ScalarParameter;\n            return `$${idx}`;\n          })\n          .join(',');\n        paramMapping.push({\n          name: usedParam.name,\n          type: ParameterTransform.PickSpread,\n          dict,\n        });\n      }\n\n      usedParam.locs.forEach((loc) =>\n        intervals.push({\n          ...loc,\n          sub: `(${sub})`,\n        }),\n      );\n      continue;\n    }\n\n    // Handle scalar transform\n    const assignedIndex = i++;\n    if (passedParams) {\n      const paramValue = passedParams[usedParam.name] as Scalar;\n      bindings.push(paramValue);\n    } else {\n      paramMapping.push({\n        name: usedParam.name,\n        type: ParameterTransform.Scalar,\n        assignedIndex,\n        required: usedParam.required,\n      } as ScalarParameter);\n    }\n\n    usedParam.locs.forEach((loc) =>\n      intervals.push({\n        ...loc,\n        sub: `$${assignedIndex}`,\n      }),\n    );\n  }\n  const flatStr = replaceIntervals(queryIR.statement, intervals);\n  return {\n    mapping: paramMapping,\n    query: flatStr,\n    bindings,\n  };\n};\n", "import { SQLQueryIR, parseTSQuery, TSQueryAST } from '@pgtyped/parser';\nimport { processSQLQueryIR } from './preprocessor-sql.js';\nimport { processTSQueryAST } from './preprocessor-ts.js';\n\nexport interface IDatabaseConnection {\n  query: (query: string, bindings: any[]) => Promise<{ rows: any[] }>;\n}\n\n/** Check for column modifier suffixes (exclamation and question marks). */\nfunction isHintedColumn(columnName: string): boolean {\n  const lastCharacter = columnName[columnName.length - 1];\n  return lastCharacter === '!' || lastCharacter === '?';\n}\n\nfunction mapQueryResultRows(rows: any[]): any[] {\n  for (const row of rows) {\n    for (const columnName in row) {\n      if (isHintedColumn(columnName)) {\n        const newColumnNameWithoutSuffix = columnName.slice(0, -1);\n        row[newColumnNameWithoutSuffix] = row[columnName];\n        delete row[columnName];\n      }\n    }\n  }\n  return rows;\n}\n\n/* Used for SQL-in-TS */\nexport class TaggedQuery<TTypePair extends { params: any; result: any }> {\n  public run: (\n    params: TTypePair['params'],\n    dbConnection: IDatabaseConnection,\n  ) => Promise<Array<TTypePair['result']>>;\n\n  private readonly query: TSQueryAST;\n\n  constructor(query: TSQueryAST) {\n    this.query = query;\n    this.run = async (params, connection) => {\n      const { query: processedQuery, bindings } = processTSQueryAST(\n        this.query,\n        params as any,\n      );\n      const result = await connection.query(processedQuery, bindings);\n      return mapQueryResultRows(result.rows);\n    };\n  }\n}\n\ninterface ITypePair {\n  params: any;\n  result: any;\n}\n\nexport const sql = <TTypePair extends ITypePair>(\n  stringsArray: TemplateStringsArray,\n) => {\n  const { query } = parseTSQuery(stringsArray[0]);\n  return new TaggedQuery<TTypePair>(query);\n};\n\n/* Used for pure SQL */\nexport class PreparedQuery<TParamType, TResultType> {\n  public run: (\n    params: TParamType,\n    dbConnection: IDatabaseConnection,\n  ) => Promise<Array<TResultType>>;\n\n  private readonly queryIR: SQLQueryIR;\n\n  constructor(queryIR: SQLQueryIR) {\n    this.queryIR = queryIR;\n    this.run = async (params, connection) => {\n      const { query: processedQuery, bindings } = processSQLQueryIR(\n        this.queryIR,\n        params as any,\n      );\n      const result = await connection.query(processedQuery, bindings);\n      return mapQueryResultRows(result.rows);\n    };\n  }\n}\n\nexport default sql;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "ParameterTransform", "PreparedQuery", "TaggedQuery", "processSQLQueryIR", "processTSQueryAST", "sql", "__toCommonJS", "ParameterTransform", "replaceIntervals", "str", "intervals", "x", "y", "offset", "result", "interval", "a", "c", "import_antlr4ts", "import_ParseTreeWalker", "import_ATNDeserializer", "import_Lexer", "import_LexerATNSimulator", "import_VocabularyImpl", "Utils", "QueryLexer", "_QueryLexer", "input", "import_ATN", "import_ATNDeserializer", "import_FailedPredicateException", "import_NoViableAltException", "import_Parser", "import_ParserRuleContext", "import_ParserATNSimulator", "import_RecognitionException", "import_Token", "import_VocabularyImpl", "Utils", "QueryParser", "_QueryParser", "predicate", "message", "input", "_localctx", "InputContext", "_la", "re", "QueryContext", "ParamContext", "IgnoredContext", "_alt", "ScalarParamContext", "PickParamContext", "ArrayPickParamContext", "ArrayParamContext", "ScalarParamNameContext", "ParamNameContext", "PickKeyContext", "InputContext", "QueryContext", "QueryParser", "parent", "invokingState", "listener", "visitor", "i", "IgnoredContext", "ParamContext", "PickParamContext", "ArrayPickParamContext", "ScalarParamContext", "ArrayParamContext", "ScalarParamNameContext", "ParamNameContext", "PickKeyContext", "import_chalk", "ParseWarningType", "ParseErrorType", "ParseEventType", "Logger", "event", "_recognizer", "symbol", "line", "col", "msg", "_e", "ParseEventType", "ParseErrorType", "import_misc", "ParamType", "assert", "condition", "ParseListener", "queryName", "logger", "ctx", "inputStream", "end", "interval", "text", "required", "name", "defLoc", "parseText", "Logger", "lexer", "QueryLexer", "tokenStream", "parser", "QueryParser", "tree", "listener", "query_default", "import_antlr4ts", "import_ParseTreeWalker", "import_ATNDeserializer", "import_Lexer", "import_LexerATNSimulator", "import_VocabularyImpl", "Utils", "SQLLexer", "_SQLLexer", "input", "import_ATN", "import_ATNDeserializer", "import_FailedPredicateException", "import_Parser", "import_ParserRuleContext", "import_ParserATNSimulator", "import_RecognitionException", "import_Token", "import_VocabularyImpl", "Utils", "SQLParser", "_SQLParser", "predicate", "message", "input", "_localctx", "InputContext", "_la", "_alt", "re", "QueryContext", "QueryDefContext", "IgnoredCommentContext", "StatementContext", "StatementBodyContext", "WordContext", "RangeContext", "ParamContext", "ParamIdContext", "NameTagContext", "ParamTagContext", "ParamTransformContext", "TransformRuleContext", "SpreadTransformContext", "PickTransformContext", "SpreadPickTransformContext", "KeyContext", "QueryNameContext", "ParamNameContext", "InputContext", "SQLParser", "i", "QueryContext", "IgnoredCommentContext", "parent", "invokingState", "listener", "visitor", "QueryDefContext", "StatementContext", "NameTagContext", "ParamTagContext", "StatementBodyContext", "ParamContext", "WordContext", "RangeContext", "ParamIdContext", "QueryNameContext", "ParamNameContext", "ParamTransformContext", "TransformRuleContext", "SpreadTransformContext", "PickTransformContext", "SpreadPickTransformContext", "KeyContext", "import_misc", "TransformType", "assert", "condition", "processScalar", "name", "required", "nextIndex", "existingConfig", "parameters", "index", "bindings", "replacement", "config", "assignedIndex", "value", "processScalarArray", "val", "v", "processObject", "paramName", "keys", "processObjectArray", "values", "pk", "processTSQueryAST", "query", "baseMap", "i", "intervals", "param", "sub", "paramBindings", "result", "ParamType", "prevConfig", "assert", "flatStr", "replaceIntervals", "processSQLQueryIR", "queryIR", "passedParams", "bindings", "paramMapping", "usedParams", "p", "i", "intervals", "usedParam", "TransformType", "sub", "val", "idx", "loc", "dict", "name", "required", "entity", "assert", "assignedIndex", "paramValue", "flatStr", "replaceIntervals", "isHintedColumn", "columnName", "lastCharacter", "mapQueryResultRows", "rows", "row", "newColumnNameWithoutSuffix", "TaggedQuery", "query", "params", "connection", "processedQuery", "bindings", "processTSQueryAST", "result", "sql", "stringsArray", "query_default", "PreparedQuery", "queryIR", "processSQLQueryIR"]
}
